; SPIR-V
; Version: 1.1
; Generator: rspirv
; Bound: 548
OpCapability Shader
OpCapability Image1D
OpCapability Sampled1D
OpCapability SampledCubeArray
OpCapability ImageQuery
%1 = OpExtInstImport "GLSL.std.450"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %98 "main" %95
OpEntryPoint GLCompute %192 "depth_load" %190
OpEntryPoint Vertex %212 "queries" %210
OpEntryPoint Vertex %264 "levels_queries" %263
OpEntryPoint Fragment %295 "texture_sample" %294
OpEntryPoint Fragment %441 "texture_sample_comparison" %439
OpEntryPoint Fragment %497 "gather" %496
OpEntryPoint Fragment %531 "depth_no_comparison" %530
OpExecutionMode %98 LocalSize 16 1 1
OpExecutionMode %192 LocalSize 16 1 1
OpExecutionMode %295 OriginUpperLeft
OpExecutionMode %441 OriginUpperLeft
OpExecutionMode %497 OriginUpperLeft
OpExecutionMode %531 OriginUpperLeft
%3 = OpString "image.wgsl"
OpSource Unknown 0 %3 "@group(0) @binding(0)
var image_mipmapped_src: texture_2d<u32>;
@group(0) @binding(3)
var image_multisampled_src: texture_multisampled_2d<u32>;
@group(0) @binding(4)
var image_depth_multisampled_src: texture_depth_multisampled_2d;
@group(0) @binding(1)
var image_storage_src: texture_storage_2d<rgba8uint, read>;
@group(0) @binding(5)
var image_array_src: texture_2d_array<u32>;
@group(0) @binding(6)
var image_dup_src: texture_storage_1d<r32uint,read>; // for #1307
@group(0) @binding(7)
var image_1d_src: texture_1d<u32>;
@group(0) @binding(2)
var image_dst: texture_storage_1d<r32uint,write>;

@compute @workgroup_size(16)
fn main(@builtin(local_invocation_id) local_id: vec3<u32>) {
    let dim = textureDimensions(image_storage_src);
    let itc = vec2<i32>(dim * local_id.xy) % vec2<i32>(10, 20);
    // loads with ivec2 coords.
    let value1 = textureLoad(image_mipmapped_src, itc, i32(local_id.z));
    // doing the same thing as the line above, but with u32, as textureLoad must also support unsigned integers.
    let value1_2 = textureLoad(image_mipmapped_src, itc, u32(local_id.z));
    let value2 = textureLoad(image_multisampled_src, itc, i32(local_id.z));
    let value4 = textureLoad(image_storage_src, itc);
    let value5 = textureLoad(image_array_src, itc, local_id.z, i32(local_id.z) + 1);
    let value6 = textureLoad(image_array_src, itc, i32(local_id.z), i32(local_id.z) + 1);
    let value7 = textureLoad(image_1d_src, i32(local_id.x), i32(local_id.z));
    // loads with uvec2 coords.
    let value1u = textureLoad(image_mipmapped_src, vec2<u32>(itc), i32(local_id.z));
    let value2u = textureLoad(image_multisampled_src, vec2<u32>(itc), i32(local_id.z));
    let value4u = textureLoad(image_storage_src, vec2<u32>(itc));
    let value5u = textureLoad(image_array_src, vec2<u32>(itc), local_id.z, i32(local_id.z) + 1);
    let value6u = textureLoad(image_array_src, vec2<u32>(itc), i32(local_id.z), i32(local_id.z) + 1);
    let value7u = textureLoad(image_1d_src, u32(local_id.x), i32(local_id.z));
    // store with ivec2 coords.
    textureStore(image_dst, itc.x, value1 + value2 + value4 + value5 + value6);
    // store with uvec2 coords.
    textureStore(image_dst, u32(itc.x), value1u + value2u + value4u + value5u + value6u);
}

@compute @workgroup_size(16, 1, 1)
fn depth_load(@builtin(local_invocation_id) local_id: vec3<u32>) {
    let dim: vec2<u32> = textureDimensions(image_storage_src);
    let itc: vec2<i32> = (vec2<i32>(dim * local_id.xy) % vec2<i32>(10, 20));
    let val: f32 = textureLoad(image_depth_multisampled_src, itc, i32(local_id.z));
    textureStore(image_dst, itc.x, vec4<u32>(u32(val)));
    return;
}

@group(0) @binding(0)
var image_1d: texture_1d<f32>;
@group(0) @binding(1)
var image_2d: texture_2d<f32>;
@group(0) @binding(2)
var image_2d_u32: texture_2d<u32>;
@group(0) @binding(3)
var image_2d_i32: texture_2d<i32>;
@group(0) @binding(4)
var image_2d_array: texture_2d_array<f32>;
@group(0) @binding(5)
var image_cube: texture_cube<f32>;
@group(0) @binding(6)
var image_cube_array: texture_cube_array<f32>;
@group(0) @binding(7)
var image_3d: texture_3d<f32>;
@group(0) @binding(8)
var image_aa: texture_multisampled_2d<f32>;

@vertex
fn queries() -> @builtin(position) vec4<f32> {
    let dim_1d = textureDimensions(image_1d);
    let dim_1d_lod = textureDimensions(image_1d, i32(dim_1d));
    let dim_2d = textureDimensions(image_2d);
    let dim_2d_lod = textureDimensions(image_2d, 1);
    let dim_2d_array = textureDimensions(image_2d_array);
    let dim_2d_array_lod = textureDimensions(image_2d_array, 1);
    let dim_cube = textureDimensions(image_cube);
    let dim_cube_lod = textureDimensions(image_cube, 1);
    let dim_cube_array = textureDimensions(image_cube_array);
    let dim_cube_array_lod = textureDimensions(image_cube_array, 1);
    let dim_3d = textureDimensions(image_3d);
    let dim_3d_lod = textureDimensions(image_3d, 1);
    let dim_2s_ms = textureDimensions(image_aa);

    let sum = dim_1d + dim_2d.y + dim_2d_lod.y + dim_2d_array.y + dim_2d_array_lod.y + 
        dim_cube.y + dim_cube_lod.y + dim_cube_array.y + dim_cube_array_lod.y +
        dim_3d.z + dim_3d_lod.z;
    return vec4<f32>(f32(sum));
}

@vertex
fn levels_queries() -> @builtin(position) vec4<f32> {
    let num_levels_2d = textureNumLevels(image_2d);
    let num_layers_2d = textureNumLayers(image_2d_array);
    let num_levels_2d_array = textureNumLevels(image_2d_array);
    let num_layers_2d_array = textureNumLayers(image_2d_array);
    let num_levels_cube = textureNumLevels(image_cube);
    let num_levels_cube_array = textureNumLevels(image_cube_array);
    let num_layers_cube = textureNumLayers(image_cube_array);
    let num_levels_3d = textureNumLevels(image_3d);
    let num_samples_aa = textureNumSamples(image_aa);

    let sum = num_layers_2d + num_layers_cube + num_samples_aa +
        num_levels_2d + num_levels_2d_array + num_levels_3d + num_levels_cube + num_levels_cube_array;
    return vec4<f32>(f32(sum));
}

@group(1) @binding(0)
var sampler_reg: sampler;

@fragment
fn texture_sample() -> @location(0) vec4<f32> {
    let tc = vec2<f32>(0.5);
    let tc3 = vec3<f32>(0.5);
    let level = 2.3;
    var a: vec4<f32>;
    a += textureSample(image_1d, sampler_reg, tc.x);
    a += textureSample(image_2d, sampler_reg, tc);
    a += textureSample(image_2d, sampler_reg, tc, vec2<i32>(3, 1));
    a += textureSampleLevel(image_2d, sampler_reg, tc, level);
    a += textureSampleLevel(image_2d, sampler_reg, tc, level, vec2<i32>(3, 1));
    a += textureSampleBias(image_2d, sampler_reg, tc, 2.0, vec2<i32>(3, 1));
    a += textureSample(image_2d_array, sampler_reg, tc, 0u);
    a += textureSample(image_2d_array, sampler_reg, tc, 0u, vec2<i32>(3, 1));
    a += textureSampleLevel(image_2d_array, sampler_reg, tc, 0u, level);
    a += textureSampleLevel(image_2d_array, sampler_reg, tc, 0u, level, vec2<i32>(3, 1));
    a += textureSampleBias(image_2d_array, sampler_reg, tc, 0u, 2.0, vec2<i32>(3, 1));
    a += textureSample(image_2d_array, sampler_reg, tc, 0);
    a += textureSample(image_2d_array, sampler_reg, tc, 0, vec2<i32>(3, 1));
    a += textureSampleLevel(image_2d_array, sampler_reg, tc, 0, level);
    a += textureSampleLevel(image_2d_array, sampler_reg, tc, 0, level, vec2<i32>(3, 1));
    a += textureSampleBias(image_2d_array, sampler_reg, tc, 0, 2.0, vec2<i32>(3, 1));
    a += textureSample(image_cube_array, sampler_reg, tc3, 0u);
    a += textureSampleLevel(image_cube_array, sampler_reg, tc3, 0u, level);
    a += textureSampleBias(image_cube_array, sampler_reg, tc3, 0u, 2.0);
    a += textureSample(image_cube_array, sampler_reg, tc3, 0);
    a += textureSampleLevel(image_cube_array, sampler_reg, tc3, 0, level);
    a += textureSampleBias(image_cube_array, sampler_reg, tc3, 0, 2.0);
    return a;
}

@group(1) @binding(1)
var sampler_cmp: sampler_comparison;
@group(1) @binding(2)
var image_2d_depth: texture_depth_2d;
@group(1) @binding(3)
var image_2d_array_depth: texture_depth_2d_array;
@group(1) @binding(4)
var image_cube_depth: texture_depth_cube;

@fragment
fn texture_sample_comparison() -> @location(0) f32 {
    let tc = vec2<f32>(0.5);
    let tc3 = vec3<f32>(0.5);
    let dref = 0.5;
    var a: f32;
    a += textureSampleCompare(image_2d_depth, sampler_cmp, tc, dref);
    a += textureSampleCompare(image_2d_array_depth, sampler_cmp, tc, 0u, dref);
    a += textureSampleCompare(image_2d_array_depth, sampler_cmp, tc, 0, dref);
    a += textureSampleCompare(image_cube_depth, sampler_cmp, tc3, dref);
    a += textureSampleCompareLevel(image_2d_depth, sampler_cmp, tc, dref);
    a += textureSampleCompareLevel(image_2d_array_depth, sampler_cmp, tc, 0u, dref);
    a += textureSampleCompareLevel(image_2d_array_depth, sampler_cmp, tc, 0, dref);
    a += textureSampleCompareLevel(image_cube_depth, sampler_cmp, tc3, dref);
    return a;
}

@fragment
fn gather() -> @location(0) vec4<f32> {
    let tc = vec2<f32>(0.5);
    let dref = 0.5;
    let s2d = textureGather(1, image_2d, sampler_reg, tc);
    let s2d_offset = textureGather(3, image_2d, sampler_reg, tc, vec2<i32>(3, 1));
    let s2d_depth = textureGatherCompare(image_2d_depth, sampler_cmp, tc, dref);
    let s2d_depth_offset = textureGatherCompare(image_2d_depth, sampler_cmp, tc, dref, vec2<i32>(3, 1));

    let u = textureGather(0, image_2d_u32, sampler_reg, tc);
    let i = textureGather(0, image_2d_i32, sampler_reg, tc);
    let f = vec4<f32>(u) + vec4<f32>(i);

    return s2d + s2d_offset + s2d_depth + s2d_depth_offset + f;
}

@fragment
fn depth_no_comparison() -> @location(0) vec4<f32> {
    let tc = vec2<f32>(0.5);
    let level = 1;
    let s2d = textureSample(image_2d_depth, sampler_reg, tc);
    let s2d_gather = textureGather(image_2d_depth, sampler_reg, tc);
    let s2d_level = textureSampleLevel(image_2d_depth, sampler_reg, tc, level);
    return s2d + s2d_gather + s2d_level;
}
"
OpName %32 "image_mipmapped_src"
OpName %34 "image_multisampled_src"
OpName %36 "image_depth_multisampled_src"
OpName %38 "image_storage_src"
OpName %40 "image_array_src"
OpName %42 "image_dup_src"
OpName %44 "image_1d_src"
OpName %46 "image_dst"
OpName %47 "image_1d"
OpName %49 "image_2d"
OpName %51 "image_2d_u32"
OpName %52 "image_2d_i32"
OpName %54 "image_2d_array"
OpName %56 "image_cube"
OpName %58 "image_cube_array"
OpName %60 "image_3d"
OpName %62 "image_aa"
OpName %64 "sampler_reg"
OpName %66 "sampler_cmp"
OpName %67 "image_2d_depth"
OpName %69 "image_2d_array_depth"
OpName %71 "image_cube_depth"
OpName %73 "naga_mod"
OpName %75 "lhs"
OpName %76 "rhs"
OpName %95 "local_id"
OpName %98 "main"
OpName %190 "local_id"
OpName %192 "depth_load"
OpName %212 "queries"
OpName %264 "levels_queries"
OpName %295 "texture_sample"
OpName %308 "a"
OpName %441 "texture_sample_comparison"
OpName %446 "a"
OpName %497 "gather"
OpName %531 "depth_no_comparison"
OpDecorate %32 DescriptorSet 0
OpDecorate %32 Binding 0
OpDecorate %34 DescriptorSet 0
OpDecorate %34 Binding 3
OpDecorate %36 DescriptorSet 0
OpDecorate %36 Binding 4
OpDecorate %38 NonWritable
OpDecorate %38 DescriptorSet 0
OpDecorate %38 Binding 1
OpDecorate %40 DescriptorSet 0
OpDecorate %40 Binding 5
OpDecorate %42 NonWritable
OpDecorate %42 DescriptorSet 0
OpDecorate %42 Binding 6
OpDecorate %44 DescriptorSet 0
OpDecorate %44 Binding 7
OpDecorate %46 NonReadable
OpDecorate %46 DescriptorSet 0
OpDecorate %46 Binding 2
OpDecorate %47 DescriptorSet 0
OpDecorate %47 Binding 0
OpDecorate %49 DescriptorSet 0
OpDecorate %49 Binding 1
OpDecorate %51 DescriptorSet 0
OpDecorate %51 Binding 2
OpDecorate %52 DescriptorSet 0
OpDecorate %52 Binding 3
OpDecorate %54 DescriptorSet 0
OpDecorate %54 Binding 4
OpDecorate %56 DescriptorSet 0
OpDecorate %56 Binding 5
OpDecorate %58 DescriptorSet 0
OpDecorate %58 Binding 6
OpDecorate %60 DescriptorSet 0
OpDecorate %60 Binding 7
OpDecorate %62 DescriptorSet 0
OpDecorate %62 Binding 8
OpDecorate %64 DescriptorSet 1
OpDecorate %64 Binding 0
OpDecorate %66 DescriptorSet 1
OpDecorate %66 Binding 1
OpDecorate %67 DescriptorSet 1
OpDecorate %67 Binding 2
OpDecorate %69 DescriptorSet 1
OpDecorate %69 Binding 3
OpDecorate %71 DescriptorSet 1
OpDecorate %71 Binding 4
OpDecorate %95 BuiltIn LocalInvocationId
OpDecorate %190 BuiltIn LocalInvocationId
OpDecorate %210 BuiltIn Position
OpDecorate %263 BuiltIn Position
OpDecorate %294 Location 0
OpDecorate %439 Location 0
OpDecorate %496 Location 0
OpDecorate %530 Location 0
%2 = OpTypeVoid
%5 = OpTypeInt 32 0
%4 = OpTypeImage %5 2D 0 0 0 1 Unknown
%6 = OpTypeImage %5 2D 0 0 1 1 Unknown
%8 = OpTypeFloat 32
%7 = OpTypeImage %8 2D 1 0 1 1 Unknown
%9 = OpTypeImage %5 2D 0 0 0 2 Rgba8ui
%10 = OpTypeImage %5 2D 0 1 0 1 Unknown
%11 = OpTypeImage %5 1D 0 0 0 2 R32ui
%12 = OpTypeImage %5 1D 0 0 0 1 Unknown
%13 = OpTypeVector %5 3
%15 = OpTypeInt 32 1
%14 = OpTypeVector %15 2
%16 = OpTypeImage %8 1D 0 0 0 1 Unknown
%17 = OpTypeImage %8 2D 0 0 0 1 Unknown
%18 = OpTypeImage %15 2D 0 0 0 1 Unknown
%19 = OpTypeImage %8 2D 0 1 0 1 Unknown
%20 = OpTypeImage %8 Cube 0 0 0 1 Unknown
%21 = OpTypeImage %8 Cube 0 1 0 1 Unknown
%22 = OpTypeImage %8 3D 0 0 0 1 Unknown
%23 = OpTypeImage %8 2D 0 0 1 1 Unknown
%24 = OpTypeVector %8 4
%25 = OpTypeSampler
%26 = OpTypeImage %8 2D 1 0 0 1 Unknown
%27 = OpTypeImage %8 2D 1 1 0 1 Unknown
%28 = OpTypeImage %8 Cube 1 0 0 1 Unknown
%29 = OpConstant  %15  3
%30 = OpConstant  %15  1
%31 = OpConstantComposite  %14  %29 %30
%33 = OpTypePointer UniformConstant %4
%32 = OpVariable  %33  UniformConstant
%35 = OpTypePointer UniformConstant %6
%34 = OpVariable  %35  UniformConstant
%37 = OpTypePointer UniformConstant %7
%36 = OpVariable  %37  UniformConstant
%39 = OpTypePointer UniformConstant %9
%38 = OpVariable  %39  UniformConstant
%41 = OpTypePointer UniformConstant %10
%40 = OpVariable  %41  UniformConstant
%43 = OpTypePointer UniformConstant %11
%42 = OpVariable  %43  UniformConstant
%45 = OpTypePointer UniformConstant %12
%44 = OpVariable  %45  UniformConstant
%46 = OpVariable  %43  UniformConstant
%48 = OpTypePointer UniformConstant %16
%47 = OpVariable  %48  UniformConstant
%50 = OpTypePointer UniformConstant %17
%49 = OpVariable  %50  UniformConstant
%51 = OpVariable  %33  UniformConstant
%53 = OpTypePointer UniformConstant %18
%52 = OpVariable  %53  UniformConstant
%55 = OpTypePointer UniformConstant %19
%54 = OpVariable  %55  UniformConstant
%57 = OpTypePointer UniformConstant %20
%56 = OpVariable  %57  UniformConstant
%59 = OpTypePointer UniformConstant %21
%58 = OpVariable  %59  UniformConstant
%61 = OpTypePointer UniformConstant %22
%60 = OpVariable  %61  UniformConstant
%63 = OpTypePointer UniformConstant %23
%62 = OpVariable  %63  UniformConstant
%65 = OpTypePointer UniformConstant %25
%64 = OpVariable  %65  UniformConstant
%66 = OpVariable  %65  UniformConstant
%68 = OpTypePointer UniformConstant %26
%67 = OpVariable  %68  UniformConstant
%70 = OpTypePointer UniformConstant %27
%69 = OpVariable  %70  UniformConstant
%72 = OpTypePointer UniformConstant %28
%71 = OpVariable  %72  UniformConstant
%74 = OpTypeFunction %14 %14 %14
%79 = OpTypeBool
%78 = OpTypeVector %79 2
%80 = OpConstant  %15  0
%81 = OpConstantComposite  %14  %80 %80
%83 = OpConstant  %15  -2147483648
%84 = OpConstant  %15  -1
%85 = OpConstantComposite  %14  %83 %83
%86 = OpConstantComposite  %14  %84 %84
%91 = OpConstantComposite  %14  %30 %30
%96 = OpTypePointer Input %13
%95 = OpVariable  %96  Input
%99 = OpTypeFunction %2
%106 = OpConstant  %15  10
%107 = OpConstant  %15  20
%108 = OpConstantComposite  %14  %106 %107
%110 = OpTypeVector %5 2
%118 = OpTypeVector %5 4
%132 = OpTypeVector %15 3
%190 = OpVariable  %96  Input
%211 = OpTypePointer Output %24
%210 = OpVariable  %211  Output
%221 = OpConstant  %5  0
%263 = OpVariable  %211  Output
%294 = OpVariable  %211  Output
%301 = OpConstant  %8  0.5
%302 = OpTypeVector %8 2
%303 = OpConstantComposite  %302  %301 %301
%304 = OpTypeVector %8 3
%305 = OpConstantComposite  %304  %301 %301 %301
%306 = OpConstant  %8  2.3
%307 = OpConstant  %8  2.0
%309 = OpTypePointer Function %24
%310 = OpConstantNull  %24
%313 = OpTypeSampledImage %16
%318 = OpTypeSampledImage %17
%339 = OpTypeSampledImage %19
%400 = OpTypeSampledImage %21
%440 = OpTypePointer Output %8
%439 = OpVariable  %440  Output
%447 = OpTypePointer Function %8
%448 = OpConstantNull  %8
%450 = OpTypeSampledImage %26
%455 = OpTypeSampledImage %27
%468 = OpTypeSampledImage %28
%475 = OpConstant  %8  0.0
%496 = OpVariable  %211  Output
%507 = OpConstant  %5  1
%510 = OpConstant  %5  3
%515 = OpTypeSampledImage %4
%518 = OpTypeVector %15 4
%519 = OpTypeSampledImage %18
%530 = OpVariable  %211  Output
%73 = OpFunction  %14  None %74
%75 = OpFunctionParameter  %14
%76 = OpFunctionParameter  %14
%77 = OpLabel
%82 = OpIEqual  %78  %76 %81
%87 = OpIEqual  %78  %75 %85
%88 = OpIEqual  %78  %76 %86
%89 = OpLogicalAnd  %78  %87 %88
%90 = OpLogicalOr  %78  %82 %89
%92 = OpSelect  %14  %90 %91 %76
%93 = OpSRem  %14  %75 %92
OpReturnValue %93
OpFunctionEnd
%98 = OpFunction  %2  None %99
%94 = OpLabel
%97 = OpLoad  %13  %95
%100 = OpLoad  %4  %32
%101 = OpLoad  %6  %34
%102 = OpLoad  %9  %38
%103 = OpLoad  %10  %40
%104 = OpLoad  %12  %44
%105 = OpLoad  %11  %46
OpBranch %109
%109 = OpLabel
OpLine %3 20 15
%111 = OpImageQuerySize  %110  %102
OpLine %3 21 15
%112 = OpVectorShuffle  %110  %97 %97 0 1
%113 = OpIMul  %110  %111 %112
%114 = OpBitcast  %14  %113
OpLine %3 21 15
%115 = OpFunctionCall  %14  %73 %114 %108
OpLine %3 23 18
%116 = OpCompositeExtract  %5  %97 2
%117 = OpBitcast  %15  %116
%119 = OpImageFetch  %118  %100 %115 Lod %117
OpLine %3 25 20
%120 = OpCompositeExtract  %5  %97 2
%122 = OpImageFetch  %118  %100 %115 Lod %120
OpLine %3 26 18
%123 = OpCompositeExtract  %5  %97 2
%124 = OpBitcast  %15  %123
%125 = OpImageFetch  %118  %101 %115 Sample %124
OpLine %3 27 18
%126 = OpImageRead  %118  %102 %115
OpLine %3 28 52
%127 = OpCompositeExtract  %5  %97 2
%128 = OpCompositeExtract  %5  %97 2
%129 = OpBitcast  %15  %128
OpLine %3 28 18
%130 = OpIAdd  %15  %129 %30
%131 = OpBitcast  %15  %127
%133 = OpCompositeConstruct  %132  %115 %131
%134 = OpImageFetch  %118  %103 %133 Lod %130
OpLine %3 29 52
%135 = OpCompositeExtract  %5  %97 2
%136 = OpBitcast  %15  %135
%137 = OpCompositeExtract  %5  %97 2
%138 = OpBitcast  %15  %137
OpLine %3 29 18
%139 = OpIAdd  %15  %138 %30
%140 = OpCompositeConstruct  %132  %115 %136
%141 = OpImageFetch  %118  %103 %140 Lod %139
OpLine %3 30 18
%142 = OpCompositeExtract  %5  %97 0
%143 = OpBitcast  %15  %142
%144 = OpCompositeExtract  %5  %97 2
%145 = OpBitcast  %15  %144
%146 = OpImageFetch  %118  %104 %143 Lod %145
OpLine %3 32 19
%147 = OpBitcast  %110  %115
%148 = OpCompositeExtract  %5  %97 2
%149 = OpBitcast  %15  %148
%150 = OpImageFetch  %118  %100 %147 Lod %149
OpLine %3 33 19
%151 = OpBitcast  %110  %115
%152 = OpCompositeExtract  %5  %97 2
%153 = OpBitcast  %15  %152
%154 = OpImageFetch  %118  %101 %151 Sample %153
OpLine %3 34 19
%155 = OpBitcast  %110  %115
%156 = OpImageRead  %118  %102 %155
OpLine %3 35 48
%157 = OpBitcast  %110  %115
%158 = OpCompositeExtract  %5  %97 2
%159 = OpCompositeExtract  %5  %97 2
%160 = OpBitcast  %15  %159
OpLine %3 35 19
%161 = OpIAdd  %15  %160 %30
%162 = OpCompositeConstruct  %13  %157 %158
%163 = OpImageFetch  %118  %103 %162 Lod %161
OpLine %3 36 48
%164 = OpBitcast  %110  %115
%165 = OpCompositeExtract  %5  %97 2
%166 = OpBitcast  %15  %165
%167 = OpCompositeExtract  %5  %97 2
%168 = OpBitcast  %15  %167
OpLine %3 36 19
%169 = OpIAdd  %15  %168 %30
%170 = OpBitcast  %5  %166
%171 = OpCompositeConstruct  %13  %164 %170
%172 = OpImageFetch  %118  %103 %171 Lod %169
OpLine %3 37 19
%173 = OpCompositeExtract  %5  %97 0
%175 = OpCompositeExtract  %5  %97 2
%176 = OpBitcast  %15  %175
%177 = OpImageFetch  %118  %104 %173 Lod %176
OpLine %3 39 29
%178 = OpCompositeExtract  %15  %115 0
%179 = OpIAdd  %118  %119 %125
%180 = OpIAdd  %118  %179 %126
%181 = OpIAdd  %118  %180 %134
%182 = OpIAdd  %118  %181 %141
OpLine %3 39 5
OpImageWrite %105 %178 %182
OpLine %3 41 29
%183 = OpCompositeExtract  %15  %115 0
%184 = OpBitcast  %5  %183
%185 = OpIAdd  %118  %150 %154
%186 = OpIAdd  %118  %185 %156
%187 = OpIAdd  %118  %186 %163
%188 = OpIAdd  %118  %187 %172
OpLine %3 41 5
OpImageWrite %105 %184 %188
OpReturn
OpFunctionEnd
%192 = OpFunction  %2  None %99
%189 = OpLabel
%191 = OpLoad  %13  %190
%193 = OpLoad  %7  %36
%194 = OpLoad  %9  %38
%195 = OpLoad  %11  %46
OpBranch %196
%196 = OpLabel
OpLine %3 46 26
%197 = OpImageQuerySize  %110  %194
OpLine %3 47 27
%198 = OpVectorShuffle  %110  %191 %191 0 1
%199 = OpIMul  %110  %197 %198
%200 = OpBitcast  %14  %199
OpLine %3 47 27
%201 = OpFunctionCall  %14  %73 %200 %108
OpLine %3 48 20
%202 = OpCompositeExtract  %5  %191 2
%203 = OpBitcast  %15  %202
%204 = OpImageFetch  %24  %193 %201 Sample %203
%205 = OpCompositeExtract  %8  %204 0
OpLine %3 49 29
%206 = OpCompositeExtract  %15  %201 0
%207 = OpConvertFToU  %5  %205
%208 = OpCompositeConstruct  %118  %207 %207 %207 %207
OpLine %3 49 5
OpImageWrite %195 %206 %208
OpReturn
OpFunctionEnd
%212 = OpFunction  %2  None %99
%209 = OpLabel
%213 = OpLoad  %16  %47
%214 = OpLoad  %17  %49
%215 = OpLoad  %19  %54
%216 = OpLoad  %20  %56
%217 = OpLoad  %21  %58
%218 = OpLoad  %22  %60
%219 = OpLoad  %23  %62
OpBranch %220
%220 = OpLabel
OpLine %3 74 18
%222 = OpImageQuerySizeLod  %5  %213 %221
OpLine %3 75 22
%223 = OpBitcast  %15  %222
%224 = OpImageQuerySizeLod  %5  %213 %223
OpLine %3 76 18
%225 = OpImageQuerySizeLod  %110  %214 %221
OpLine %3 77 22
%226 = OpImageQuerySizeLod  %110  %214 %30
OpLine %3 78 24
%227 = OpImageQuerySizeLod  %13  %215 %221
%228 = OpVectorShuffle  %110  %227 %227 0 1
OpLine %3 79 28
%229 = OpImageQuerySizeLod  %13  %215 %30
%230 = OpVectorShuffle  %110  %229 %229 0 1
OpLine %3 80 20
%231 = OpImageQuerySizeLod  %110  %216 %221
OpLine %3 81 24
%232 = OpImageQuerySizeLod  %110  %216 %30
OpLine %3 82 26
%233 = OpImageQuerySizeLod  %13  %217 %221
%234 = OpVectorShuffle  %110  %233 %233 0 0
OpLine %3 83 30
%235 = OpImageQuerySizeLod  %13  %217 %30
%236 = OpVectorShuffle  %110  %235 %235 0 0
OpLine %3 84 18
%237 = OpImageQuerySizeLod  %13  %218 %221
OpLine %3 85 22
%238 = OpImageQuerySizeLod  %13  %218 %30
OpLine %3 86 21
%239 = OpImageQuerySize  %110  %219
OpLine %3 88 15
%240 = OpCompositeExtract  %5  %225 1
%241 = OpIAdd  %5  %222 %240
%242 = OpCompositeExtract  %5  %226 1
%243 = OpIAdd  %5  %241 %242
%244 = OpCompositeExtract  %5  %228 1
%245 = OpIAdd  %5  %243 %244
%246 = OpCompositeExtract  %5  %230 1
%247 = OpIAdd  %5  %245 %246
%248 = OpCompositeExtract  %5  %231 1
%249 = OpIAdd  %5  %247 %248
%250 = OpCompositeExtract  %5  %232 1
%251 = OpIAdd  %5  %249 %250
%252 = OpCompositeExtract  %5  %234 1
%253 = OpIAdd  %5  %251 %252
%254 = OpCompositeExtract  %5  %236 1
%255 = OpIAdd  %5  %253 %254
%256 = OpCompositeExtract  %5  %237 2
%257 = OpIAdd  %5  %255 %256
%258 = OpCompositeExtract  %5  %238 2
%259 = OpIAdd  %5  %257 %258
OpLine %3 91 12
%260 = OpConvertUToF  %8  %259
%261 = OpCompositeConstruct  %24  %260 %260 %260 %260
OpStore %210 %261
OpReturn
OpFunctionEnd
%264 = OpFunction  %2  None %99
%262 = OpLabel
%265 = OpLoad  %17  %49
%266 = OpLoad  %19  %54
%267 = OpLoad  %20  %56
%268 = OpLoad  %21  %58
%269 = OpLoad  %22  %60
%270 = OpLoad  %23  %62
OpBranch %271
%271 = OpLabel
OpLine %3 96 25
%272 = OpImageQueryLevels  %5  %265
OpLine %3 97 25
%273 = OpImageQuerySizeLod  %13  %266 %221
%274 = OpCompositeExtract  %5  %273 2
OpLine %3 98 31
%275 = OpImageQueryLevels  %5  %266
OpLine %3 99 31
%276 = OpImageQuerySizeLod  %13  %266 %221
%277 = OpCompositeExtract  %5  %276 2
OpLine %3 100 27
%278 = OpImageQueryLevels  %5  %267
OpLine %3 101 33
%279 = OpImageQueryLevels  %5  %268
OpLine %3 102 27
%280 = OpImageQuerySizeLod  %13  %268 %221
%281 = OpCompositeExtract  %5  %280 2
OpLine %3 103 25
%282 = OpImageQueryLevels  %5  %269
OpLine %3 104 26
%283 = OpImageQuerySamples  %5  %270
OpLine %3 106 15
%284 = OpIAdd  %5  %274 %281
%285 = OpIAdd  %5  %284 %283
%286 = OpIAdd  %5  %285 %272
%287 = OpIAdd  %5  %286 %275
%288 = OpIAdd  %5  %287 %282
%289 = OpIAdd  %5  %288 %278
%290 = OpIAdd  %5  %289 %279
OpLine %3 108 12
%291 = OpConvertUToF  %8  %290
%292 = OpCompositeConstruct  %24  %291 %291 %291 %291
OpStore %263 %292
OpReturn
OpFunctionEnd
%295 = OpFunction  %2  None %99
%293 = OpLabel
%308 = OpVariable  %309  Function %310
%296 = OpLoad  %16  %47
%297 = OpLoad  %17  %49
%298 = OpLoad  %19  %54
%299 = OpLoad  %21  %58
%300 = OpLoad  %25  %64
OpBranch %311
%311 = OpLabel
OpLine %3 116 14
OpLine %3 117 15
OpLine %3 120 5
%312 = OpCompositeExtract  %8  %303 0
%314 = OpSampledImage  %313  %296 %300
%315 = OpImageSampleImplicitLod  %24  %314 %312
%316 = OpLoad  %24  %308
%317 = OpFAdd  %24  %316 %315
OpLine %3 120 5
OpStore %308 %317
OpLine %3 121 5
%319 = OpSampledImage  %318  %297 %300
%320 = OpImageSampleImplicitLod  %24  %319 %303
%321 = OpLoad  %24  %308
%322 = OpFAdd  %24  %321 %320
OpLine %3 121 5
OpStore %308 %322
OpLine %3 122 5
%323 = OpSampledImage  %318  %297 %300
%324 = OpImageSampleImplicitLod  %24  %323 %303 ConstOffset %31
%325 = OpLoad  %24  %308
%326 = OpFAdd  %24  %325 %324
OpLine %3 122 5
OpStore %308 %326
OpLine %3 123 5
%327 = OpSampledImage  %318  %297 %300
%328 = OpImageSampleExplicitLod  %24  %327 %303 Lod %306
%329 = OpLoad  %24  %308
%330 = OpFAdd  %24  %329 %328
OpLine %3 123 5
OpStore %308 %330
OpLine %3 124 5
%331 = OpSampledImage  %318  %297 %300
%332 = OpImageSampleExplicitLod  %24  %331 %303 Lod|ConstOffset %306 %31
%333 = OpLoad  %24  %308
%334 = OpFAdd  %24  %333 %332
OpLine %3 124 5
OpStore %308 %334
OpLine %3 125 5
%335 = OpSampledImage  %318  %297 %300
%336 = OpImageSampleImplicitLod  %24  %335 %303 Bias|ConstOffset %307 %31
%337 = OpLoad  %24  %308
%338 = OpFAdd  %24  %337 %336
OpLine %3 125 5
OpStore %308 %338
OpLine %3 126 5
%340 = OpConvertUToF  %8  %221
%341 = OpCompositeConstruct  %304  %303 %340
%342 = OpSampledImage  %339  %298 %300
%343 = OpImageSampleImplicitLod  %24  %342 %341
%344 = OpLoad  %24  %308
%345 = OpFAdd  %24  %344 %343
OpLine %3 126 5
OpStore %308 %345
OpLine %3 127 5
%346 = OpConvertUToF  %8  %221
%347 = OpCompositeConstruct  %304  %303 %346
%348 = OpSampledImage  %339  %298 %300
%349 = OpImageSampleImplicitLod  %24  %348 %347 ConstOffset %31
%350 = OpLoad  %24  %308
%351 = OpFAdd  %24  %350 %349
OpLine %3 127 5
OpStore %308 %351
OpLine %3 128 5
%352 = OpConvertUToF  %8  %221
%353 = OpCompositeConstruct  %304  %303 %352
%354 = OpSampledImage  %339  %298 %300
%355 = OpImageSampleExplicitLod  %24  %354 %353 Lod %306
%356 = OpLoad  %24  %308
%357 = OpFAdd  %24  %356 %355
OpLine %3 128 5
OpStore %308 %357
OpLine %3 129 5
%358 = OpConvertUToF  %8  %221
%359 = OpCompositeConstruct  %304  %303 %358
%360 = OpSampledImage  %339  %298 %300
%361 = OpImageSampleExplicitLod  %24  %360 %359 Lod|ConstOffset %306 %31
%362 = OpLoad  %24  %308
%363 = OpFAdd  %24  %362 %361
OpLine %3 129 5
OpStore %308 %363
OpLine %3 130 5
%364 = OpConvertUToF  %8  %221
%365 = OpCompositeConstruct  %304  %303 %364
%366 = OpSampledImage  %339  %298 %300
%367 = OpImageSampleImplicitLod  %24  %366 %365 Bias|ConstOffset %307 %31
%368 = OpLoad  %24  %308
%369 = OpFAdd  %24  %368 %367
OpLine %3 130 5
OpStore %308 %369
OpLine %3 131 5
%370 = OpConvertSToF  %8  %80
%371 = OpCompositeConstruct  %304  %303 %370
%372 = OpSampledImage  %339  %298 %300
%373 = OpImageSampleImplicitLod  %24  %372 %371
%374 = OpLoad  %24  %308
%375 = OpFAdd  %24  %374 %373
OpLine %3 131 5
OpStore %308 %375
OpLine %3 132 5
%376 = OpConvertSToF  %8  %80
%377 = OpCompositeConstruct  %304  %303 %376
%378 = OpSampledImage  %339  %298 %300
%379 = OpImageSampleImplicitLod  %24  %378 %377 ConstOffset %31
%380 = OpLoad  %24  %308
%381 = OpFAdd  %24  %380 %379
OpLine %3 132 5
OpStore %308 %381
OpLine %3 133 5
%382 = OpConvertSToF  %8  %80
%383 = OpCompositeConstruct  %304  %303 %382
%384 = OpSampledImage  %339  %298 %300
%385 = OpImageSampleExplicitLod  %24  %384 %383 Lod %306
%386 = OpLoad  %24  %308
%387 = OpFAdd  %24  %386 %385
OpLine %3 133 5
OpStore %308 %387
OpLine %3 134 5
%388 = OpConvertSToF  %8  %80
%389 = OpCompositeConstruct  %304  %303 %388
%390 = OpSampledImage  %339  %298 %300
%391 = OpImageSampleExplicitLod  %24  %390 %389 Lod|ConstOffset %306 %31
%392 = OpLoad  %24  %308
%393 = OpFAdd  %24  %392 %391
OpLine %3 134 5
OpStore %308 %393
OpLine %3 135 5
%394 = OpConvertSToF  %8  %80
%395 = OpCompositeConstruct  %304  %303 %394
%396 = OpSampledImage  %339  %298 %300
%397 = OpImageSampleImplicitLod  %24  %396 %395 Bias|ConstOffset %307 %31
%398 = OpLoad  %24  %308
%399 = OpFAdd  %24  %398 %397
OpLine %3 135 5
OpStore %308 %399
OpLine %3 136 5
%401 = OpConvertUToF  %8  %221
%402 = OpCompositeConstruct  %24  %305 %401
%403 = OpSampledImage  %400  %299 %300
%404 = OpImageSampleImplicitLod  %24  %403 %402
%405 = OpLoad  %24  %308
%406 = OpFAdd  %24  %405 %404
OpLine %3 136 5
OpStore %308 %406
OpLine %3 137 5
%407 = OpConvertUToF  %8  %221
%408 = OpCompositeConstruct  %24  %305 %407
%409 = OpSampledImage  %400  %299 %300
%410 = OpImageSampleExplicitLod  %24  %409 %408 Lod %306
%411 = OpLoad  %24  %308
%412 = OpFAdd  %24  %411 %410
OpLine %3 137 5
OpStore %308 %412
OpLine %3 138 5
%413 = OpConvertUToF  %8  %221
%414 = OpCompositeConstruct  %24  %305 %413
%415 = OpSampledImage  %400  %299 %300
%416 = OpImageSampleImplicitLod  %24  %415 %414 Bias %307
%417 = OpLoad  %24  %308
%418 = OpFAdd  %24  %417 %416
OpLine %3 138 5
OpStore %308 %418
OpLine %3 139 5
%419 = OpConvertSToF  %8  %80
%420 = OpCompositeConstruct  %24  %305 %419
%421 = OpSampledImage  %400  %299 %300
%422 = OpImageSampleImplicitLod  %24  %421 %420
%423 = OpLoad  %24  %308
%424 = OpFAdd  %24  %423 %422
OpLine %3 139 5
OpStore %308 %424
OpLine %3 140 5
%425 = OpConvertSToF  %8  %80
%426 = OpCompositeConstruct  %24  %305 %425
%427 = OpSampledImage  %400  %299 %300
%428 = OpImageSampleExplicitLod  %24  %427 %426 Lod %306
%429 = OpLoad  %24  %308
%430 = OpFAdd  %24  %429 %428
OpLine %3 140 5
OpStore %308 %430
OpLine %3 141 5
%431 = OpConvertSToF  %8  %80
%432 = OpCompositeConstruct  %24  %305 %431
%433 = OpSampledImage  %400  %299 %300
%434 = OpImageSampleImplicitLod  %24  %433 %432 Bias %307
%435 = OpLoad  %24  %308
%436 = OpFAdd  %24  %435 %434
OpLine %3 141 5
OpStore %308 %436
OpLine %3 1 1
%437 = OpLoad  %24  %308
OpStore %294 %437
OpReturn
OpFunctionEnd
%441 = OpFunction  %2  None %99
%438 = OpLabel
%446 = OpVariable  %447  Function %448
%442 = OpLoad  %25  %66
%443 = OpLoad  %26  %67
%444 = OpLoad  %27  %69
%445 = OpLoad  %28  %71
OpBranch %449
%449 = OpLabel
OpLine %3 156 14
OpLine %3 157 15
OpLine %3 160 5
%451 = OpSampledImage  %450  %443 %442
%452 = OpImageSampleDrefImplicitLod  %8  %451 %303 %301
%453 = OpLoad  %8  %446
%454 = OpFAdd  %8  %453 %452
OpLine %3 160 5
OpStore %446 %454
OpLine %3 161 5
%456 = OpConvertUToF  %8  %221
%457 = OpCompositeConstruct  %304  %303 %456
%458 = OpSampledImage  %455  %444 %442
%459 = OpImageSampleDrefImplicitLod  %8  %458 %457 %301
%460 = OpLoad  %8  %446
%461 = OpFAdd  %8  %460 %459
OpLine %3 161 5
OpStore %446 %461
OpLine %3 162 5
%462 = OpConvertSToF  %8  %80
%463 = OpCompositeConstruct  %304  %303 %462
%464 = OpSampledImage  %455  %444 %442
%465 = OpImageSampleDrefImplicitLod  %8  %464 %463 %301
%466 = OpLoad  %8  %446
%467 = OpFAdd  %8  %466 %465
OpLine %3 162 5
OpStore %446 %467
OpLine %3 163 5
%469 = OpSampledImage  %468  %445 %442
%470 = OpImageSampleDrefImplicitLod  %8  %469 %305 %301
%471 = OpLoad  %8  %446
%472 = OpFAdd  %8  %471 %470
OpLine %3 163 5
OpStore %446 %472
OpLine %3 164 5
%473 = OpSampledImage  %450  %443 %442
%474 = OpImageSampleDrefExplicitLod  %8  %473 %303 %301 Lod %475
%476 = OpLoad  %8  %446
%477 = OpFAdd  %8  %476 %474
OpLine %3 164 5
OpStore %446 %477
OpLine %3 165 5
%478 = OpConvertUToF  %8  %221
%479 = OpCompositeConstruct  %304  %303 %478
%480 = OpSampledImage  %455  %444 %442
%481 = OpImageSampleDrefExplicitLod  %8  %480 %479 %301 Lod %475
%482 = OpLoad  %8  %446
%483 = OpFAdd  %8  %482 %481
OpLine %3 165 5
OpStore %446 %483
OpLine %3 166 5
%484 = OpConvertSToF  %8  %80
%485 = OpCompositeConstruct  %304  %303 %484
%486 = OpSampledImage  %455  %444 %442
%487 = OpImageSampleDrefExplicitLod  %8  %486 %485 %301 Lod %475
%488 = OpLoad  %8  %446
%489 = OpFAdd  %8  %488 %487
OpLine %3 166 5
OpStore %446 %489
OpLine %3 167 5
%490 = OpSampledImage  %468  %445 %442
%491 = OpImageSampleDrefExplicitLod  %8  %490 %305 %301 Lod %475
%492 = OpLoad  %8  %446
%493 = OpFAdd  %8  %492 %491
OpLine %3 167 5
OpStore %446 %493
OpLine %3 1 1
%494 = OpLoad  %8  %446
OpStore %439 %494
OpReturn
OpFunctionEnd
%497 = OpFunction  %2  None %99
%495 = OpLabel
%498 = OpLoad  %17  %49
%499 = OpLoad  %4  %51
%500 = OpLoad  %18  %52
%501 = OpLoad  %25  %64
%502 = OpLoad  %25  %66
%503 = OpLoad  %26  %67
OpBranch %504
%504 = OpLabel
OpLine %3 173 14
OpLine %3 175 15
%505 = OpSampledImage  %318  %498 %501
%506 = OpImageGather  %24  %505 %303 %507
OpLine %3 176 22
%508 = OpSampledImage  %318  %498 %501
%509 = OpImageGather  %24  %508 %303 %510 ConstOffset %31
OpLine %3 177 21
%511 = OpSampledImage  %450  %503 %502
%512 = OpImageDrefGather  %24  %511 %303 %301
OpLine %3 178 28
%513 = OpSampledImage  %450  %503 %502
%514 = OpImageDrefGather  %24  %513 %303 %301 ConstOffset %31
OpLine %3 180 13
%516 = OpSampledImage  %515  %499 %501
%517 = OpImageGather  %118  %516 %303 %221
OpLine %3 181 13
%520 = OpSampledImage  %519  %500 %501
%521 = OpImageGather  %518  %520 %303 %221
OpLine %3 182 13
%522 = OpConvertUToF  %24  %517
%523 = OpConvertSToF  %24  %521
%524 = OpFAdd  %24  %522 %523
OpLine %3 184 12
%525 = OpFAdd  %24  %506 %509
%526 = OpFAdd  %24  %525 %512
%527 = OpFAdd  %24  %526 %514
%528 = OpFAdd  %24  %527 %524
OpStore %496 %528
OpReturn
OpFunctionEnd
%531 = OpFunction  %2  None %99
%529 = OpLabel
%532 = OpLoad  %25  %64
%533 = OpLoad  %26  %67
OpBranch %534
%534 = OpLabel
OpLine %3 189 14
OpLine %3 191 15
%535 = OpSampledImage  %450  %533 %532
%536 = OpImageSampleImplicitLod  %24  %535 %303
%537 = OpCompositeExtract  %8  %536 0
OpLine %3 192 22
%538 = OpSampledImage  %450  %533 %532
%539 = OpImageGather  %24  %538 %303 %221
OpLine %3 193 21
%540 = OpSampledImage  %450  %533 %532
%542 = OpConvertSToF  %8  %30
%541 = OpImageSampleExplicitLod  %24  %540 %303 Lod %542
%543 = OpCompositeExtract  %8  %541 0
OpLine %3 191 15
%544 = OpCompositeConstruct  %24  %537 %537 %537 %537
%545 = OpFAdd  %24  %544 %539
%546 = OpCompositeConstruct  %24  %543 %543 %543 %543
%547 = OpFAdd  %24  %545 %546
OpStore %530 %547
OpReturn
OpFunctionEnd