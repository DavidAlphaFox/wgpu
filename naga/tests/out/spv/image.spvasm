; SPIR-V
; Version: 1.1
; Generator: rspirv
; Bound: 545
OpCapability Shader
OpCapability Image1D
OpCapability Sampled1D
OpCapability SampledCubeArray
OpCapability ImageQuery
%1 = OpExtInstImport "GLSL.std.450"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %96 "main" %93
OpEntryPoint GLCompute %188 "depth_load" %186
OpEntryPoint Vertex %208 "queries" %206
OpEntryPoint Vertex %260 "levels_queries" %259
OpEntryPoint Fragment %291 "texture_sample" %290
OpEntryPoint Fragment %438 "texture_sample_comparison" %436
OpEntryPoint Fragment %494 "gather" %493
OpEntryPoint Fragment %528 "depth_no_comparison" %527
OpExecutionMode %96 LocalSize 16 1 1
OpExecutionMode %188 LocalSize 16 1 1
OpExecutionMode %291 OriginUpperLeft
OpExecutionMode %438 OriginUpperLeft
OpExecutionMode %494 OriginUpperLeft
OpExecutionMode %528 OriginUpperLeft
%3 = OpString "image.wgsl"
OpSource Unknown 0 %3 "@group(0) @binding(0)
var image_mipmapped_src: texture_2d<u32>;
@group(0) @binding(3)
var image_multisampled_src: texture_multisampled_2d<u32>;
@group(0) @binding(4)
var image_depth_multisampled_src: texture_depth_multisampled_2d;
@group(0) @binding(1)
var image_storage_src: texture_storage_2d<rgba8uint, read>;
@group(0) @binding(5)
var image_array_src: texture_2d_array<u32>;
@group(0) @binding(6)
var image_dup_src: texture_storage_1d<r32uint,read>; // for #1307
@group(0) @binding(7)
var image_1d_src: texture_1d<u32>;
@group(0) @binding(2)
var image_dst: texture_storage_1d<r32uint,write>;

@compute @workgroup_size(16)
fn main(@builtin(local_invocation_id) local_id: vec3<u32>) {
    let dim = textureDimensions(image_storage_src);
    let itc = vec2<i32>(dim * local_id.xy) % vec2<i32>(10, 20);
    // loads with ivec2 coords.
    let value1 = textureLoad(image_mipmapped_src, itc, i32(local_id.z));
    // doing the same thing as the line above, but with u32, as textureLoad must also support unsigned integers.
    let value1_2 = textureLoad(image_mipmapped_src, itc, u32(local_id.z));
    let value2 = textureLoad(image_multisampled_src, itc, i32(local_id.z));
    let value4 = textureLoad(image_storage_src, itc);
    let value5 = textureLoad(image_array_src, itc, local_id.z, i32(local_id.z) + 1);
    let value6 = textureLoad(image_array_src, itc, i32(local_id.z), i32(local_id.z) + 1);
    let value7 = textureLoad(image_1d_src, i32(local_id.x), i32(local_id.z));
    // loads with uvec2 coords.
    let value1u = textureLoad(image_mipmapped_src, vec2<u32>(itc), i32(local_id.z));
    let value2u = textureLoad(image_multisampled_src, vec2<u32>(itc), i32(local_id.z));
    let value4u = textureLoad(image_storage_src, vec2<u32>(itc));
    let value5u = textureLoad(image_array_src, vec2<u32>(itc), local_id.z, i32(local_id.z) + 1);
    let value6u = textureLoad(image_array_src, vec2<u32>(itc), i32(local_id.z), i32(local_id.z) + 1);
    let value7u = textureLoad(image_1d_src, u32(local_id.x), i32(local_id.z));
    // store with ivec2 coords.
    textureStore(image_dst, itc.x, value1 + value2 + value4 + value5 + value6);
    // store with uvec2 coords.
    textureStore(image_dst, u32(itc.x), value1u + value2u + value4u + value5u + value6u);
}

@compute @workgroup_size(16, 1, 1)
fn depth_load(@builtin(local_invocation_id) local_id: vec3<u32>) {
    let dim: vec2<u32> = textureDimensions(image_storage_src);
    let itc: vec2<i32> = (vec2<i32>(dim * local_id.xy) % vec2<i32>(10, 20));
    let val: f32 = textureLoad(image_depth_multisampled_src, itc, i32(local_id.z));
    textureStore(image_dst, itc.x, vec4<u32>(u32(val)));
    return;
}

@group(0) @binding(0)
var image_1d: texture_1d<f32>;
@group(0) @binding(1)
var image_2d: texture_2d<f32>;
@group(0) @binding(2)
var image_2d_u32: texture_2d<u32>;
@group(0) @binding(3)
var image_2d_i32: texture_2d<i32>;
@group(0) @binding(4)
var image_2d_array: texture_2d_array<f32>;
@group(0) @binding(5)
var image_cube: texture_cube<f32>;
@group(0) @binding(6)
var image_cube_array: texture_cube_array<f32>;
@group(0) @binding(7)
var image_3d: texture_3d<f32>;
@group(0) @binding(8)
var image_aa: texture_multisampled_2d<f32>;

@vertex
fn queries() -> @builtin(position) vec4<f32> {
    let dim_1d = textureDimensions(image_1d);
    let dim_1d_lod = textureDimensions(image_1d, i32(dim_1d));
    let dim_2d = textureDimensions(image_2d);
    let dim_2d_lod = textureDimensions(image_2d, 1);
    let dim_2d_array = textureDimensions(image_2d_array);
    let dim_2d_array_lod = textureDimensions(image_2d_array, 1);
    let dim_cube = textureDimensions(image_cube);
    let dim_cube_lod = textureDimensions(image_cube, 1);
    let dim_cube_array = textureDimensions(image_cube_array);
    let dim_cube_array_lod = textureDimensions(image_cube_array, 1);
    let dim_3d = textureDimensions(image_3d);
    let dim_3d_lod = textureDimensions(image_3d, 1);
    let dim_2s_ms = textureDimensions(image_aa);

    let sum = dim_1d + dim_2d.y + dim_2d_lod.y + dim_2d_array.y + dim_2d_array_lod.y + 
        dim_cube.y + dim_cube_lod.y + dim_cube_array.y + dim_cube_array_lod.y +
        dim_3d.z + dim_3d_lod.z;
    return vec4<f32>(f32(sum));
}

@vertex
fn levels_queries() -> @builtin(position) vec4<f32> {
    let num_levels_2d = textureNumLevels(image_2d);
    let num_layers_2d = textureNumLayers(image_2d_array);
    let num_levels_2d_array = textureNumLevels(image_2d_array);
    let num_layers_2d_array = textureNumLayers(image_2d_array);
    let num_levels_cube = textureNumLevels(image_cube);
    let num_levels_cube_array = textureNumLevels(image_cube_array);
    let num_layers_cube = textureNumLayers(image_cube_array);
    let num_levels_3d = textureNumLevels(image_3d);
    let num_samples_aa = textureNumSamples(image_aa);

    let sum = num_layers_2d + num_layers_cube + num_samples_aa +
        num_levels_2d + num_levels_2d_array + num_levels_3d + num_levels_cube + num_levels_cube_array;
    return vec4<f32>(f32(sum));
}

@group(1) @binding(0)
var sampler_reg: sampler;

@fragment
fn texture_sample() -> @location(0) vec4<f32> {
    const tc = vec2<f32>(0.5);
    const tc3 = vec3<f32>(0.5);
    const offset = vec2<i32>(3, 1);
    let level = 2.3;
    var a: vec4<f32>;
    a += textureSample(image_1d, sampler_reg, tc.x);
    a += textureSample(image_2d, sampler_reg, tc);
    a += textureSample(image_2d, sampler_reg, tc, vec2<i32>(3, 1));
    a += textureSampleLevel(image_2d, sampler_reg, tc, level);
    a += textureSampleLevel(image_2d, sampler_reg, tc, level, offset);
    a += textureSampleBias(image_2d, sampler_reg, tc, 2.0, offset);
    a += textureSample(image_2d_array, sampler_reg, tc, 0u);
    a += textureSample(image_2d_array, sampler_reg, tc, 0u, offset);
    a += textureSampleLevel(image_2d_array, sampler_reg, tc, 0u, level);
    a += textureSampleLevel(image_2d_array, sampler_reg, tc, 0u, level, offset);
    a += textureSampleBias(image_2d_array, sampler_reg, tc, 0u, 2.0, offset);
    a += textureSample(image_2d_array, sampler_reg, tc, 0);
    a += textureSample(image_2d_array, sampler_reg, tc, 0, offset);
    a += textureSampleLevel(image_2d_array, sampler_reg, tc, 0, level);
    a += textureSampleLevel(image_2d_array, sampler_reg, tc, 0, level, offset);
    a += textureSampleBias(image_2d_array, sampler_reg, tc, 0, 2.0, offset);
    a += textureSample(image_cube_array, sampler_reg, tc3, 0u);
    a += textureSampleLevel(image_cube_array, sampler_reg, tc3, 0u, level);
    a += textureSampleBias(image_cube_array, sampler_reg, tc3, 0u, 2.0);
    a += textureSample(image_cube_array, sampler_reg, tc3, 0);
    a += textureSampleLevel(image_cube_array, sampler_reg, tc3, 0, level);
    a += textureSampleBias(image_cube_array, sampler_reg, tc3, 0, 2.0);
    return a;
}

@group(1) @binding(1)
var sampler_cmp: sampler_comparison;
@group(1) @binding(2)
var image_2d_depth: texture_depth_2d;
@group(1) @binding(3)
var image_2d_array_depth: texture_depth_2d_array;
@group(1) @binding(4)
var image_cube_depth: texture_depth_cube;

@fragment
fn texture_sample_comparison() -> @location(0) f32 {
    let tc = vec2<f32>(0.5);
    let tc3 = vec3<f32>(0.5);
    let dref = 0.5;
    var a: f32;
    a += textureSampleCompare(image_2d_depth, sampler_cmp, tc, dref);
    a += textureSampleCompare(image_2d_array_depth, sampler_cmp, tc, 0u, dref);
    a += textureSampleCompare(image_2d_array_depth, sampler_cmp, tc, 0, dref);
    a += textureSampleCompare(image_cube_depth, sampler_cmp, tc3, dref);
    a += textureSampleCompareLevel(image_2d_depth, sampler_cmp, tc, dref);
    a += textureSampleCompareLevel(image_2d_array_depth, sampler_cmp, tc, 0u, dref);
    a += textureSampleCompareLevel(image_2d_array_depth, sampler_cmp, tc, 0, dref);
    a += textureSampleCompareLevel(image_cube_depth, sampler_cmp, tc3, dref);
    return a;
}

@fragment
fn gather() -> @location(0) vec4<f32> {
    let tc = vec2<f32>(0.5);
    let dref = 0.5;
    let s2d = textureGather(1, image_2d, sampler_reg, tc);
    let s2d_offset = textureGather(3, image_2d, sampler_reg, tc, vec2<i32>(3, 1));
    let s2d_depth = textureGatherCompare(image_2d_depth, sampler_cmp, tc, dref);
    let s2d_depth_offset = textureGatherCompare(image_2d_depth, sampler_cmp, tc, dref, vec2<i32>(3, 1));

    let u = textureGather(0, image_2d_u32, sampler_reg, tc);
    let i = textureGather(0, image_2d_i32, sampler_reg, tc);
    let f = vec4<f32>(u) + vec4<f32>(i);

    return s2d + s2d_offset + s2d_depth + s2d_depth_offset + f;
}

@fragment
fn depth_no_comparison() -> @location(0) vec4<f32> {
    let tc = vec2<f32>(0.5);
    let level = 1;
    let s2d = textureSample(image_2d_depth, sampler_reg, tc);
    let s2d_gather = textureGather(image_2d_depth, sampler_reg, tc);
    let s2d_level = textureSampleLevel(image_2d_depth, sampler_reg, tc, level);
    return s2d + s2d_gather + s2d_level;
}
"
OpName %29 "image_mipmapped_src"
OpName %31 "image_multisampled_src"
OpName %33 "image_depth_multisampled_src"
OpName %35 "image_storage_src"
OpName %37 "image_array_src"
OpName %39 "image_dup_src"
OpName %41 "image_1d_src"
OpName %43 "image_dst"
OpName %44 "image_1d"
OpName %46 "image_2d"
OpName %48 "image_2d_u32"
OpName %49 "image_2d_i32"
OpName %51 "image_2d_array"
OpName %53 "image_cube"
OpName %55 "image_cube_array"
OpName %57 "image_3d"
OpName %59 "image_aa"
OpName %61 "sampler_reg"
OpName %63 "sampler_cmp"
OpName %64 "image_2d_depth"
OpName %66 "image_2d_array_depth"
OpName %68 "image_cube_depth"
OpName %70 "naga_mod"
OpName %72 "lhs"
OpName %73 "rhs"
OpName %93 "local_id"
OpName %96 "main"
OpName %186 "local_id"
OpName %188 "depth_load"
OpName %208 "queries"
OpName %260 "levels_queries"
OpName %291 "texture_sample"
OpName %306 "a"
OpName %438 "texture_sample_comparison"
OpName %443 "a"
OpName %494 "gather"
OpName %528 "depth_no_comparison"
OpDecorate %29 DescriptorSet 0
OpDecorate %29 Binding 0
OpDecorate %31 DescriptorSet 0
OpDecorate %31 Binding 3
OpDecorate %33 DescriptorSet 0
OpDecorate %33 Binding 4
OpDecorate %35 NonWritable
OpDecorate %35 DescriptorSet 0
OpDecorate %35 Binding 1
OpDecorate %37 DescriptorSet 0
OpDecorate %37 Binding 5
OpDecorate %39 NonWritable
OpDecorate %39 DescriptorSet 0
OpDecorate %39 Binding 6
OpDecorate %41 DescriptorSet 0
OpDecorate %41 Binding 7
OpDecorate %43 NonReadable
OpDecorate %43 DescriptorSet 0
OpDecorate %43 Binding 2
OpDecorate %44 DescriptorSet 0
OpDecorate %44 Binding 0
OpDecorate %46 DescriptorSet 0
OpDecorate %46 Binding 1
OpDecorate %48 DescriptorSet 0
OpDecorate %48 Binding 2
OpDecorate %49 DescriptorSet 0
OpDecorate %49 Binding 3
OpDecorate %51 DescriptorSet 0
OpDecorate %51 Binding 4
OpDecorate %53 DescriptorSet 0
OpDecorate %53 Binding 5
OpDecorate %55 DescriptorSet 0
OpDecorate %55 Binding 6
OpDecorate %57 DescriptorSet 0
OpDecorate %57 Binding 7
OpDecorate %59 DescriptorSet 0
OpDecorate %59 Binding 8
OpDecorate %61 DescriptorSet 1
OpDecorate %61 Binding 0
OpDecorate %63 DescriptorSet 1
OpDecorate %63 Binding 1
OpDecorate %64 DescriptorSet 1
OpDecorate %64 Binding 2
OpDecorate %66 DescriptorSet 1
OpDecorate %66 Binding 3
OpDecorate %68 DescriptorSet 1
OpDecorate %68 Binding 4
OpDecorate %93 BuiltIn LocalInvocationId
OpDecorate %186 BuiltIn LocalInvocationId
OpDecorate %206 BuiltIn Position
OpDecorate %259 BuiltIn Position
OpDecorate %290 Location 0
OpDecorate %436 Location 0
OpDecorate %493 Location 0
OpDecorate %527 Location 0
%2 = OpTypeVoid
%5 = OpTypeInt 32 0
%4 = OpTypeImage %5 2D 0 0 0 1 Unknown
%6 = OpTypeImage %5 2D 0 0 1 1 Unknown
%8 = OpTypeFloat 32
%7 = OpTypeImage %8 2D 1 0 1 1 Unknown
%9 = OpTypeImage %5 2D 0 0 0 2 Rgba8ui
%10 = OpTypeImage %5 2D 0 1 0 1 Unknown
%11 = OpTypeImage %5 1D 0 0 0 2 R32ui
%12 = OpTypeImage %5 1D 0 0 0 1 Unknown
%13 = OpTypeVector %5 3
%15 = OpTypeInt 32 1
%14 = OpTypeVector %15 2
%16 = OpTypeImage %8 1D 0 0 0 1 Unknown
%17 = OpTypeImage %8 2D 0 0 0 1 Unknown
%18 = OpTypeImage %15 2D 0 0 0 1 Unknown
%19 = OpTypeImage %8 2D 0 1 0 1 Unknown
%20 = OpTypeImage %8 Cube 0 0 0 1 Unknown
%21 = OpTypeImage %8 Cube 0 1 0 1 Unknown
%22 = OpTypeImage %8 3D 0 0 0 1 Unknown
%23 = OpTypeImage %8 2D 0 0 1 1 Unknown
%24 = OpTypeVector %8 4
%25 = OpTypeSampler
%26 = OpTypeImage %8 2D 1 0 0 1 Unknown
%27 = OpTypeImage %8 2D 1 1 0 1 Unknown
%28 = OpTypeImage %8 Cube 1 0 0 1 Unknown
%30 = OpTypePointer UniformConstant %4
%29 = OpVariable  %30  UniformConstant
%32 = OpTypePointer UniformConstant %6
%31 = OpVariable  %32  UniformConstant
%34 = OpTypePointer UniformConstant %7
%33 = OpVariable  %34  UniformConstant
%36 = OpTypePointer UniformConstant %9
%35 = OpVariable  %36  UniformConstant
%38 = OpTypePointer UniformConstant %10
%37 = OpVariable  %38  UniformConstant
%40 = OpTypePointer UniformConstant %11
%39 = OpVariable  %40  UniformConstant
%42 = OpTypePointer UniformConstant %12
%41 = OpVariable  %42  UniformConstant
%43 = OpVariable  %40  UniformConstant
%45 = OpTypePointer UniformConstant %16
%44 = OpVariable  %45  UniformConstant
%47 = OpTypePointer UniformConstant %17
%46 = OpVariable  %47  UniformConstant
%48 = OpVariable  %30  UniformConstant
%50 = OpTypePointer UniformConstant %18
%49 = OpVariable  %50  UniformConstant
%52 = OpTypePointer UniformConstant %19
%51 = OpVariable  %52  UniformConstant
%54 = OpTypePointer UniformConstant %20
%53 = OpVariable  %54  UniformConstant
%56 = OpTypePointer UniformConstant %21
%55 = OpVariable  %56  UniformConstant
%58 = OpTypePointer UniformConstant %22
%57 = OpVariable  %58  UniformConstant
%60 = OpTypePointer UniformConstant %23
%59 = OpVariable  %60  UniformConstant
%62 = OpTypePointer UniformConstant %25
%61 = OpVariable  %62  UniformConstant
%63 = OpVariable  %62  UniformConstant
%65 = OpTypePointer UniformConstant %26
%64 = OpVariable  %65  UniformConstant
%67 = OpTypePointer UniformConstant %27
%66 = OpVariable  %67  UniformConstant
%69 = OpTypePointer UniformConstant %28
%68 = OpVariable  %69  UniformConstant
%71 = OpTypeFunction %14 %14 %14
%76 = OpTypeBool
%75 = OpTypeVector %76 2
%77 = OpConstant  %15  0
%78 = OpConstantComposite  %14  %77 %77
%80 = OpConstant  %15  -2147483648
%81 = OpConstant  %15  -1
%82 = OpConstantComposite  %14  %80 %80
%83 = OpConstantComposite  %14  %81 %81
%88 = OpConstant  %15  1
%89 = OpConstantComposite  %14  %88 %88
%94 = OpTypePointer Input %13
%93 = OpVariable  %94  Input
%97 = OpTypeFunction %2
%104 = OpConstant  %15  10
%105 = OpConstant  %15  20
%106 = OpConstantComposite  %14  %104 %105
%108 = OpTypeVector %5 2
%116 = OpTypeVector %5 4
%129 = OpTypeVector %15 3
%186 = OpVariable  %94  Input
%207 = OpTypePointer Output %24
%206 = OpVariable  %207  Output
%217 = OpConstant  %5  0
%259 = OpVariable  %207  Output
%290 = OpVariable  %207  Output
%297 = OpConstant  %8  0.5
%298 = OpTypeVector %8 2
%299 = OpConstantComposite  %298  %297 %297
%300 = OpTypeVector %8 3
%301 = OpConstantComposite  %300  %297 %297 %297
%302 = OpConstant  %15  3
%303 = OpConstantComposite  %14  %302 %88
%304 = OpConstant  %8  2.3
%305 = OpConstant  %8  2.0
%307 = OpTypePointer Function %24
%308 = OpConstantNull  %24
%310 = OpTypeSampledImage %16
%315 = OpTypeSampledImage %17
%336 = OpTypeSampledImage %19
%397 = OpTypeSampledImage %21
%437 = OpTypePointer Output %8
%436 = OpVariable  %437  Output
%444 = OpTypePointer Function %8
%445 = OpConstantNull  %8
%447 = OpTypeSampledImage %26
%452 = OpTypeSampledImage %27
%465 = OpTypeSampledImage %28
%472 = OpConstant  %8  0.0
%493 = OpVariable  %207  Output
%504 = OpConstant  %5  1
%507 = OpConstant  %5  3
%512 = OpTypeSampledImage %4
%515 = OpTypeVector %15 4
%516 = OpTypeSampledImage %18
%527 = OpVariable  %207  Output
%70 = OpFunction  %14  None %71
%72 = OpFunctionParameter  %14
%73 = OpFunctionParameter  %14
%74 = OpLabel
%79 = OpIEqual  %75  %73 %78
%84 = OpIEqual  %75  %72 %82
%85 = OpIEqual  %75  %73 %83
%86 = OpLogicalAnd  %75  %84 %85
%87 = OpLogicalOr  %75  %79 %86
%90 = OpSelect  %14  %87 %89 %73
%91 = OpSRem  %14  %72 %90
OpReturnValue %91
OpFunctionEnd
%96 = OpFunction  %2  None %97
%92 = OpLabel
%95 = OpLoad  %13  %93
%98 = OpLoad  %4  %29
%99 = OpLoad  %6  %31
%100 = OpLoad  %9  %35
%101 = OpLoad  %10  %37
%102 = OpLoad  %12  %41
%103 = OpLoad  %11  %43
OpBranch %107
%107 = OpLabel
OpLine %3 20 15
%109 = OpImageQuerySize  %108  %100
OpLine %3 21 15
%110 = OpVectorShuffle  %108  %95 %95 0 1
%111 = OpIMul  %108  %109 %110
%112 = OpBitcast  %14  %111
OpLine %3 21 15
%113 = OpFunctionCall  %14  %70 %112 %106
OpLine %3 23 18
%114 = OpCompositeExtract  %5  %95 2
%115 = OpBitcast  %15  %114
%117 = OpImageFetch  %116  %98 %113 Lod %115
OpLine %3 25 20
%118 = OpCompositeExtract  %5  %95 2
%119 = OpImageFetch  %116  %98 %113 Lod %118
OpLine %3 26 18
%120 = OpCompositeExtract  %5  %95 2
%121 = OpBitcast  %15  %120
%122 = OpImageFetch  %116  %99 %113 Sample %121
OpLine %3 27 18
%123 = OpImageRead  %116  %100 %113
OpLine %3 28 52
%124 = OpCompositeExtract  %5  %95 2
%125 = OpCompositeExtract  %5  %95 2
%126 = OpBitcast  %15  %125
OpLine %3 28 18
%127 = OpIAdd  %15  %126 %88
%128 = OpBitcast  %15  %124
%130 = OpCompositeConstruct  %129  %113 %128
%131 = OpImageFetch  %116  %101 %130 Lod %127
OpLine %3 29 52
%132 = OpCompositeExtract  %5  %95 2
%133 = OpBitcast  %15  %132
%134 = OpCompositeExtract  %5  %95 2
%135 = OpBitcast  %15  %134
OpLine %3 29 18
%136 = OpIAdd  %15  %135 %88
%137 = OpCompositeConstruct  %129  %113 %133
%138 = OpImageFetch  %116  %101 %137 Lod %136
OpLine %3 30 18
%139 = OpCompositeExtract  %5  %95 0
%140 = OpBitcast  %15  %139
%141 = OpCompositeExtract  %5  %95 2
%142 = OpBitcast  %15  %141
%143 = OpImageFetch  %116  %102 %140 Lod %142
OpLine %3 32 19
%144 = OpBitcast  %108  %113
%145 = OpCompositeExtract  %5  %95 2
%146 = OpBitcast  %15  %145
%147 = OpImageFetch  %116  %98 %144 Lod %146
OpLine %3 33 19
%148 = OpBitcast  %108  %113
%149 = OpCompositeExtract  %5  %95 2
%150 = OpBitcast  %15  %149
%151 = OpImageFetch  %116  %99 %148 Sample %150
OpLine %3 34 19
%152 = OpBitcast  %108  %113
%153 = OpImageRead  %116  %100 %152
OpLine %3 35 48
%154 = OpBitcast  %108  %113
%155 = OpCompositeExtract  %5  %95 2
%156 = OpCompositeExtract  %5  %95 2
%157 = OpBitcast  %15  %156
OpLine %3 35 19
%158 = OpIAdd  %15  %157 %88
%159 = OpCompositeConstruct  %13  %154 %155
%160 = OpImageFetch  %116  %101 %159 Lod %158
OpLine %3 36 48
%161 = OpBitcast  %108  %113
%162 = OpCompositeExtract  %5  %95 2
%163 = OpBitcast  %15  %162
%164 = OpCompositeExtract  %5  %95 2
%165 = OpBitcast  %15  %164
OpLine %3 36 19
%166 = OpIAdd  %15  %165 %88
%167 = OpBitcast  %5  %163
%168 = OpCompositeConstruct  %13  %161 %167
%169 = OpImageFetch  %116  %101 %168 Lod %166
OpLine %3 37 19
%170 = OpCompositeExtract  %5  %95 0
%171 = OpCompositeExtract  %5  %95 2
%172 = OpBitcast  %15  %171
%173 = OpImageFetch  %116  %102 %170 Lod %172
OpLine %3 39 29
%174 = OpCompositeExtract  %15  %113 0
%175 = OpIAdd  %116  %117 %122
%176 = OpIAdd  %116  %175 %123
%177 = OpIAdd  %116  %176 %131
%178 = OpIAdd  %116  %177 %138
OpLine %3 39 5
OpImageWrite %103 %174 %178
OpLine %3 41 29
%179 = OpCompositeExtract  %15  %113 0
%180 = OpBitcast  %5  %179
%181 = OpIAdd  %116  %147 %151
%182 = OpIAdd  %116  %181 %153
%183 = OpIAdd  %116  %182 %160
%184 = OpIAdd  %116  %183 %169
OpLine %3 41 5
OpImageWrite %103 %180 %184
OpReturn
OpFunctionEnd
%188 = OpFunction  %2  None %97
%185 = OpLabel
%187 = OpLoad  %13  %186
%189 = OpLoad  %7  %33
%190 = OpLoad  %9  %35
%191 = OpLoad  %11  %43
OpBranch %192
%192 = OpLabel
OpLine %3 46 26
%193 = OpImageQuerySize  %108  %190
OpLine %3 47 27
%194 = OpVectorShuffle  %108  %187 %187 0 1
%195 = OpIMul  %108  %193 %194
%196 = OpBitcast  %14  %195
OpLine %3 47 27
%197 = OpFunctionCall  %14  %70 %196 %106
OpLine %3 48 20
%198 = OpCompositeExtract  %5  %187 2
%199 = OpBitcast  %15  %198
%200 = OpImageFetch  %24  %189 %197 Sample %199
%201 = OpCompositeExtract  %8  %200 0
OpLine %3 49 29
%202 = OpCompositeExtract  %15  %197 0
%203 = OpConvertFToU  %5  %201
%204 = OpCompositeConstruct  %116  %203 %203 %203 %203
OpLine %3 49 5
OpImageWrite %191 %202 %204
OpReturn
OpFunctionEnd
%208 = OpFunction  %2  None %97
%205 = OpLabel
%209 = OpLoad  %16  %44
%210 = OpLoad  %17  %46
%211 = OpLoad  %19  %51
%212 = OpLoad  %20  %53
%213 = OpLoad  %21  %55
%214 = OpLoad  %22  %57
%215 = OpLoad  %23  %59
OpBranch %216
%216 = OpLabel
OpLine %3 74 18
%218 = OpImageQuerySizeLod  %5  %209 %217
OpLine %3 75 22
%219 = OpBitcast  %15  %218
%220 = OpImageQuerySizeLod  %5  %209 %219
OpLine %3 76 18
%221 = OpImageQuerySizeLod  %108  %210 %217
OpLine %3 77 22
%222 = OpImageQuerySizeLod  %108  %210 %88
OpLine %3 78 24
%223 = OpImageQuerySizeLod  %13  %211 %217
%224 = OpVectorShuffle  %108  %223 %223 0 1
OpLine %3 79 28
%225 = OpImageQuerySizeLod  %13  %211 %88
%226 = OpVectorShuffle  %108  %225 %225 0 1
OpLine %3 80 20
%227 = OpImageQuerySizeLod  %108  %212 %217
OpLine %3 81 24
%228 = OpImageQuerySizeLod  %108  %212 %88
OpLine %3 82 26
%229 = OpImageQuerySizeLod  %13  %213 %217
%230 = OpVectorShuffle  %108  %229 %229 0 0
OpLine %3 83 30
%231 = OpImageQuerySizeLod  %13  %213 %88
%232 = OpVectorShuffle  %108  %231 %231 0 0
OpLine %3 84 18
%233 = OpImageQuerySizeLod  %13  %214 %217
OpLine %3 85 22
%234 = OpImageQuerySizeLod  %13  %214 %88
OpLine %3 86 21
%235 = OpImageQuerySize  %108  %215
OpLine %3 88 15
%236 = OpCompositeExtract  %5  %221 1
%237 = OpIAdd  %5  %218 %236
%238 = OpCompositeExtract  %5  %222 1
%239 = OpIAdd  %5  %237 %238
%240 = OpCompositeExtract  %5  %224 1
%241 = OpIAdd  %5  %239 %240
%242 = OpCompositeExtract  %5  %226 1
%243 = OpIAdd  %5  %241 %242
%244 = OpCompositeExtract  %5  %227 1
%245 = OpIAdd  %5  %243 %244
%246 = OpCompositeExtract  %5  %228 1
%247 = OpIAdd  %5  %245 %246
%248 = OpCompositeExtract  %5  %230 1
%249 = OpIAdd  %5  %247 %248
%250 = OpCompositeExtract  %5  %232 1
%251 = OpIAdd  %5  %249 %250
%252 = OpCompositeExtract  %5  %233 2
%253 = OpIAdd  %5  %251 %252
%254 = OpCompositeExtract  %5  %234 2
%255 = OpIAdd  %5  %253 %254
OpLine %3 91 12
%256 = OpConvertUToF  %8  %255
%257 = OpCompositeConstruct  %24  %256 %256 %256 %256
OpStore %206 %257
OpReturn
OpFunctionEnd
%260 = OpFunction  %2  None %97
%258 = OpLabel
%261 = OpLoad  %17  %46
%262 = OpLoad  %19  %51
%263 = OpLoad  %20  %53
%264 = OpLoad  %21  %55
%265 = OpLoad  %22  %57
%266 = OpLoad  %23  %59
OpBranch %267
%267 = OpLabel
OpLine %3 96 25
%268 = OpImageQueryLevels  %5  %261
OpLine %3 97 25
%269 = OpImageQuerySizeLod  %13  %262 %217
%270 = OpCompositeExtract  %5  %269 2
OpLine %3 98 31
%271 = OpImageQueryLevels  %5  %262
OpLine %3 99 31
%272 = OpImageQuerySizeLod  %13  %262 %217
%273 = OpCompositeExtract  %5  %272 2
OpLine %3 100 27
%274 = OpImageQueryLevels  %5  %263
OpLine %3 101 33
%275 = OpImageQueryLevels  %5  %264
OpLine %3 102 27
%276 = OpImageQuerySizeLod  %13  %264 %217
%277 = OpCompositeExtract  %5  %276 2
OpLine %3 103 25
%278 = OpImageQueryLevels  %5  %265
OpLine %3 104 26
%279 = OpImageQuerySamples  %5  %266
OpLine %3 106 15
%280 = OpIAdd  %5  %270 %277
%281 = OpIAdd  %5  %280 %279
%282 = OpIAdd  %5  %281 %268
%283 = OpIAdd  %5  %282 %271
%284 = OpIAdd  %5  %283 %278
%285 = OpIAdd  %5  %284 %274
%286 = OpIAdd  %5  %285 %275
OpLine %3 108 12
%287 = OpConvertUToF  %8  %286
%288 = OpCompositeConstruct  %24  %287 %287 %287 %287
OpStore %259 %288
OpReturn
OpFunctionEnd
%291 = OpFunction  %2  None %97
%289 = OpLabel
%306 = OpVariable  %307  Function %308
%292 = OpLoad  %16  %44
%293 = OpLoad  %17  %46
%294 = OpLoad  %19  %51
%295 = OpLoad  %21  %55
%296 = OpLoad  %25  %61
OpBranch %309
%309 = OpLabel
OpLine %3 116 16
OpLine %3 117 17
OpLine %3 118 20
OpLine %3 121 5
%311 = OpSampledImage  %310  %292 %296
%312 = OpImageSampleImplicitLod  %24  %311 %297
%313 = OpLoad  %24  %306
%314 = OpFAdd  %24  %313 %312
OpLine %3 121 5
OpStore %306 %314
OpLine %3 122 5
%316 = OpSampledImage  %315  %293 %296
%317 = OpImageSampleImplicitLod  %24  %316 %299
%318 = OpLoad  %24  %306
%319 = OpFAdd  %24  %318 %317
OpLine %3 122 5
OpStore %306 %319
OpLine %3 123 5
%320 = OpSampledImage  %315  %293 %296
%321 = OpImageSampleImplicitLod  %24  %320 %299 ConstOffset %303
%322 = OpLoad  %24  %306
%323 = OpFAdd  %24  %322 %321
OpLine %3 123 5
OpStore %306 %323
OpLine %3 124 5
%324 = OpSampledImage  %315  %293 %296
%325 = OpImageSampleExplicitLod  %24  %324 %299 Lod %304
%326 = OpLoad  %24  %306
%327 = OpFAdd  %24  %326 %325
OpLine %3 124 5
OpStore %306 %327
OpLine %3 125 5
%328 = OpSampledImage  %315  %293 %296
%329 = OpImageSampleExplicitLod  %24  %328 %299 Lod|ConstOffset %304 %303
%330 = OpLoad  %24  %306
%331 = OpFAdd  %24  %330 %329
OpLine %3 125 5
OpStore %306 %331
OpLine %3 126 5
%332 = OpSampledImage  %315  %293 %296
%333 = OpImageSampleImplicitLod  %24  %332 %299 Bias|ConstOffset %305 %303
%334 = OpLoad  %24  %306
%335 = OpFAdd  %24  %334 %333
OpLine %3 126 5
OpStore %306 %335
OpLine %3 127 5
%337 = OpConvertUToF  %8  %217
%338 = OpCompositeConstruct  %300  %299 %337
%339 = OpSampledImage  %336  %294 %296
%340 = OpImageSampleImplicitLod  %24  %339 %338
%341 = OpLoad  %24  %306
%342 = OpFAdd  %24  %341 %340
OpLine %3 127 5
OpStore %306 %342
OpLine %3 128 5
%343 = OpConvertUToF  %8  %217
%344 = OpCompositeConstruct  %300  %299 %343
%345 = OpSampledImage  %336  %294 %296
%346 = OpImageSampleImplicitLod  %24  %345 %344 ConstOffset %303
%347 = OpLoad  %24  %306
%348 = OpFAdd  %24  %347 %346
OpLine %3 128 5
OpStore %306 %348
OpLine %3 129 5
%349 = OpConvertUToF  %8  %217
%350 = OpCompositeConstruct  %300  %299 %349
%351 = OpSampledImage  %336  %294 %296
%352 = OpImageSampleExplicitLod  %24  %351 %350 Lod %304
%353 = OpLoad  %24  %306
%354 = OpFAdd  %24  %353 %352
OpLine %3 129 5
OpStore %306 %354
OpLine %3 130 5
%355 = OpConvertUToF  %8  %217
%356 = OpCompositeConstruct  %300  %299 %355
%357 = OpSampledImage  %336  %294 %296
%358 = OpImageSampleExplicitLod  %24  %357 %356 Lod|ConstOffset %304 %303
%359 = OpLoad  %24  %306
%360 = OpFAdd  %24  %359 %358
OpLine %3 130 5
OpStore %306 %360
OpLine %3 131 5
%361 = OpConvertUToF  %8  %217
%362 = OpCompositeConstruct  %300  %299 %361
%363 = OpSampledImage  %336  %294 %296
%364 = OpImageSampleImplicitLod  %24  %363 %362 Bias|ConstOffset %305 %303
%365 = OpLoad  %24  %306
%366 = OpFAdd  %24  %365 %364
OpLine %3 131 5
OpStore %306 %366
OpLine %3 132 5
%367 = OpConvertSToF  %8  %77
%368 = OpCompositeConstruct  %300  %299 %367
%369 = OpSampledImage  %336  %294 %296
%370 = OpImageSampleImplicitLod  %24  %369 %368
%371 = OpLoad  %24  %306
%372 = OpFAdd  %24  %371 %370
OpLine %3 132 5
OpStore %306 %372
OpLine %3 133 5
%373 = OpConvertSToF  %8  %77
%374 = OpCompositeConstruct  %300  %299 %373
%375 = OpSampledImage  %336  %294 %296
%376 = OpImageSampleImplicitLod  %24  %375 %374 ConstOffset %303
%377 = OpLoad  %24  %306
%378 = OpFAdd  %24  %377 %376
OpLine %3 133 5
OpStore %306 %378
OpLine %3 134 5
%379 = OpConvertSToF  %8  %77
%380 = OpCompositeConstruct  %300  %299 %379
%381 = OpSampledImage  %336  %294 %296
%382 = OpImageSampleExplicitLod  %24  %381 %380 Lod %304
%383 = OpLoad  %24  %306
%384 = OpFAdd  %24  %383 %382
OpLine %3 134 5
OpStore %306 %384
OpLine %3 135 5
%385 = OpConvertSToF  %8  %77
%386 = OpCompositeConstruct  %300  %299 %385
%387 = OpSampledImage  %336  %294 %296
%388 = OpImageSampleExplicitLod  %24  %387 %386 Lod|ConstOffset %304 %303
%389 = OpLoad  %24  %306
%390 = OpFAdd  %24  %389 %388
OpLine %3 135 5
OpStore %306 %390
OpLine %3 136 5
%391 = OpConvertSToF  %8  %77
%392 = OpCompositeConstruct  %300  %299 %391
%393 = OpSampledImage  %336  %294 %296
%394 = OpImageSampleImplicitLod  %24  %393 %392 Bias|ConstOffset %305 %303
%395 = OpLoad  %24  %306
%396 = OpFAdd  %24  %395 %394
OpLine %3 136 5
OpStore %306 %396
OpLine %3 137 5
%398 = OpConvertUToF  %8  %217
%399 = OpCompositeConstruct  %24  %301 %398
%400 = OpSampledImage  %397  %295 %296
%401 = OpImageSampleImplicitLod  %24  %400 %399
%402 = OpLoad  %24  %306
%403 = OpFAdd  %24  %402 %401
OpLine %3 137 5
OpStore %306 %403
OpLine %3 138 5
%404 = OpConvertUToF  %8  %217
%405 = OpCompositeConstruct  %24  %301 %404
%406 = OpSampledImage  %397  %295 %296
%407 = OpImageSampleExplicitLod  %24  %406 %405 Lod %304
%408 = OpLoad  %24  %306
%409 = OpFAdd  %24  %408 %407
OpLine %3 138 5
OpStore %306 %409
OpLine %3 139 5
%410 = OpConvertUToF  %8  %217
%411 = OpCompositeConstruct  %24  %301 %410
%412 = OpSampledImage  %397  %295 %296
%413 = OpImageSampleImplicitLod  %24  %412 %411 Bias %305
%414 = OpLoad  %24  %306
%415 = OpFAdd  %24  %414 %413
OpLine %3 139 5
OpStore %306 %415
OpLine %3 140 5
%416 = OpConvertSToF  %8  %77
%417 = OpCompositeConstruct  %24  %301 %416
%418 = OpSampledImage  %397  %295 %296
%419 = OpImageSampleImplicitLod  %24  %418 %417
%420 = OpLoad  %24  %306
%421 = OpFAdd  %24  %420 %419
OpLine %3 140 5
OpStore %306 %421
OpLine %3 141 5
%422 = OpConvertSToF  %8  %77
%423 = OpCompositeConstruct  %24  %301 %422
%424 = OpSampledImage  %397  %295 %296
%425 = OpImageSampleExplicitLod  %24  %424 %423 Lod %304
%426 = OpLoad  %24  %306
%427 = OpFAdd  %24  %426 %425
OpLine %3 141 5
OpStore %306 %427
OpLine %3 142 5
%428 = OpConvertSToF  %8  %77
%429 = OpCompositeConstruct  %24  %301 %428
%430 = OpSampledImage  %397  %295 %296
%431 = OpImageSampleImplicitLod  %24  %430 %429 Bias %305
%432 = OpLoad  %24  %306
%433 = OpFAdd  %24  %432 %431
OpLine %3 142 5
OpStore %306 %433
OpLine %3 1 1
%434 = OpLoad  %24  %306
OpStore %290 %434
OpReturn
OpFunctionEnd
%438 = OpFunction  %2  None %97
%435 = OpLabel
%443 = OpVariable  %444  Function %445
%439 = OpLoad  %25  %63
%440 = OpLoad  %26  %64
%441 = OpLoad  %27  %66
%442 = OpLoad  %28  %68
OpBranch %446
%446 = OpLabel
OpLine %3 157 14
OpLine %3 158 15
OpLine %3 161 5
%448 = OpSampledImage  %447  %440 %439
%449 = OpImageSampleDrefImplicitLod  %8  %448 %299 %297
%450 = OpLoad  %8  %443
%451 = OpFAdd  %8  %450 %449
OpLine %3 161 5
OpStore %443 %451
OpLine %3 162 5
%453 = OpConvertUToF  %8  %217
%454 = OpCompositeConstruct  %300  %299 %453
%455 = OpSampledImage  %452  %441 %439
%456 = OpImageSampleDrefImplicitLod  %8  %455 %454 %297
%457 = OpLoad  %8  %443
%458 = OpFAdd  %8  %457 %456
OpLine %3 162 5
OpStore %443 %458
OpLine %3 163 5
%459 = OpConvertSToF  %8  %77
%460 = OpCompositeConstruct  %300  %299 %459
%461 = OpSampledImage  %452  %441 %439
%462 = OpImageSampleDrefImplicitLod  %8  %461 %460 %297
%463 = OpLoad  %8  %443
%464 = OpFAdd  %8  %463 %462
OpLine %3 163 5
OpStore %443 %464
OpLine %3 164 5
%466 = OpSampledImage  %465  %442 %439
%467 = OpImageSampleDrefImplicitLod  %8  %466 %301 %297
%468 = OpLoad  %8  %443
%469 = OpFAdd  %8  %468 %467
OpLine %3 164 5
OpStore %443 %469
OpLine %3 165 5
%470 = OpSampledImage  %447  %440 %439
%471 = OpImageSampleDrefExplicitLod  %8  %470 %299 %297 Lod %472
%473 = OpLoad  %8  %443
%474 = OpFAdd  %8  %473 %471
OpLine %3 165 5
OpStore %443 %474
OpLine %3 166 5
%475 = OpConvertUToF  %8  %217
%476 = OpCompositeConstruct  %300  %299 %475
%477 = OpSampledImage  %452  %441 %439
%478 = OpImageSampleDrefExplicitLod  %8  %477 %476 %297 Lod %472
%479 = OpLoad  %8  %443
%480 = OpFAdd  %8  %479 %478
OpLine %3 166 5
OpStore %443 %480
OpLine %3 167 5
%481 = OpConvertSToF  %8  %77
%482 = OpCompositeConstruct  %300  %299 %481
%483 = OpSampledImage  %452  %441 %439
%484 = OpImageSampleDrefExplicitLod  %8  %483 %482 %297 Lod %472
%485 = OpLoad  %8  %443
%486 = OpFAdd  %8  %485 %484
OpLine %3 167 5
OpStore %443 %486
OpLine %3 168 5
%487 = OpSampledImage  %465  %442 %439
%488 = OpImageSampleDrefExplicitLod  %8  %487 %301 %297 Lod %472
%489 = OpLoad  %8  %443
%490 = OpFAdd  %8  %489 %488
OpLine %3 168 5
OpStore %443 %490
OpLine %3 1 1
%491 = OpLoad  %8  %443
OpStore %436 %491
OpReturn
OpFunctionEnd
%494 = OpFunction  %2  None %97
%492 = OpLabel
%495 = OpLoad  %17  %46
%496 = OpLoad  %4  %48
%497 = OpLoad  %18  %49
%498 = OpLoad  %25  %61
%499 = OpLoad  %25  %63
%500 = OpLoad  %26  %64
OpBranch %501
%501 = OpLabel
OpLine %3 174 14
OpLine %3 176 15
%502 = OpSampledImage  %315  %495 %498
%503 = OpImageGather  %24  %502 %299 %504
OpLine %3 177 22
%505 = OpSampledImage  %315  %495 %498
%506 = OpImageGather  %24  %505 %299 %507 ConstOffset %303
OpLine %3 178 21
%508 = OpSampledImage  %447  %500 %499
%509 = OpImageDrefGather  %24  %508 %299 %297
OpLine %3 179 28
%510 = OpSampledImage  %447  %500 %499
%511 = OpImageDrefGather  %24  %510 %299 %297 ConstOffset %303
OpLine %3 181 13
%513 = OpSampledImage  %512  %496 %498
%514 = OpImageGather  %116  %513 %299 %217
OpLine %3 182 13
%517 = OpSampledImage  %516  %497 %498
%518 = OpImageGather  %515  %517 %299 %217
OpLine %3 183 13
%519 = OpConvertUToF  %24  %514
%520 = OpConvertSToF  %24  %518
%521 = OpFAdd  %24  %519 %520
OpLine %3 185 12
%522 = OpFAdd  %24  %503 %506
%523 = OpFAdd  %24  %522 %509
%524 = OpFAdd  %24  %523 %511
%525 = OpFAdd  %24  %524 %521
OpStore %493 %525
OpReturn
OpFunctionEnd
%528 = OpFunction  %2  None %97
%526 = OpLabel
%529 = OpLoad  %25  %61
%530 = OpLoad  %26  %64
OpBranch %531
%531 = OpLabel
OpLine %3 190 14
OpLine %3 192 15
%532 = OpSampledImage  %447  %530 %529
%533 = OpImageSampleImplicitLod  %24  %532 %299
%534 = OpCompositeExtract  %8  %533 0
OpLine %3 193 22
%535 = OpSampledImage  %447  %530 %529
%536 = OpImageGather  %24  %535 %299 %217
OpLine %3 194 21
%537 = OpSampledImage  %447  %530 %529
%539 = OpConvertSToF  %8  %88
%538 = OpImageSampleExplicitLod  %24  %537 %299 Lod %539
%540 = OpCompositeExtract  %8  %538 0
OpLine %3 192 15
%541 = OpCompositeConstruct  %24  %534 %534 %534 %534
%542 = OpFAdd  %24  %541 %536
%543 = OpCompositeConstruct  %24  %540 %540 %540 %540
%544 = OpFAdd  %24  %542 %543
OpStore %527 %544
OpReturn
OpFunctionEnd