; SPIR-V
; Version: 1.1
; Generator: rspirv
; Bound: 547
OpCapability Shader
OpCapability Image1D
OpCapability Sampled1D
OpCapability SampledCubeArray
OpCapability ImageQuery
%1 = OpExtInstImport "GLSL.std.450"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %100 "main" %97
OpEntryPoint GLCompute %191 "depth_load" %189
OpEntryPoint Vertex %211 "queries" %209
OpEntryPoint Vertex %263 "levels_queries" %262
OpEntryPoint Fragment %294 "texture_sample" %293
OpEntryPoint Fragment %440 "texture_sample_comparison" %438
OpEntryPoint Fragment %496 "gather" %495
OpEntryPoint Fragment %530 "depth_no_comparison" %529
OpExecutionMode %100 LocalSize 16 1 1
OpExecutionMode %191 LocalSize 16 1 1
OpExecutionMode %294 OriginUpperLeft
OpExecutionMode %440 OriginUpperLeft
OpExecutionMode %496 OriginUpperLeft
OpExecutionMode %530 OriginUpperLeft
%3 = OpString "image.wgsl"
OpSource Unknown 0 %3 "@group(0) @binding(0)
var image_mipmapped_src: texture_2d<u32>;
@group(0) @binding(3)
var image_multisampled_src: texture_multisampled_2d<u32>;
@group(0) @binding(4)
var image_depth_multisampled_src: texture_depth_multisampled_2d;
@group(0) @binding(1)
var image_storage_src: texture_storage_2d<rgba8uint, read>;
@group(0) @binding(5)
var image_array_src: texture_2d_array<u32>;
@group(0) @binding(6)
var image_dup_src: texture_storage_1d<r32uint,read>; // for #1307
@group(0) @binding(7)
var image_1d_src: texture_1d<u32>;
@group(0) @binding(2)
var image_dst: texture_storage_1d<r32uint,write>;

@compute @workgroup_size(16)
fn main(@builtin(local_invocation_id) local_id: vec3<u32>) {
    let dim = textureDimensions(image_storage_src);
    let itc = vec2<i32>(dim * local_id.xy) % vec2<i32>(10, 20);
    // loads with ivec2 coords.
    let value1 = textureLoad(image_mipmapped_src, itc, i32(local_id.z));
    let value2 = textureLoad(image_multisampled_src, itc, i32(local_id.z));
    let value4 = textureLoad(image_storage_src, itc);
    let value5 = textureLoad(image_array_src, itc, local_id.z, i32(local_id.z) + 1);
    let value6 = textureLoad(image_array_src, itc, i32(local_id.z), i32(local_id.z) + 1);
    let value7 = textureLoad(image_1d_src, i32(local_id.x), i32(local_id.z));
    // loads with uvec2 coords.
    let value1u = textureLoad(image_mipmapped_src, vec2<u32>(itc), i32(local_id.z));
    let value2u = textureLoad(image_multisampled_src, vec2<u32>(itc), i32(local_id.z));
    let value4u = textureLoad(image_storage_src, vec2<u32>(itc));
    let value5u = textureLoad(image_array_src, vec2<u32>(itc), local_id.z, i32(local_id.z) + 1);
    let value6u = textureLoad(image_array_src, vec2<u32>(itc), i32(local_id.z), i32(local_id.z) + 1);
    let value7u = textureLoad(image_1d_src, u32(local_id.x), i32(local_id.z));
    // store with ivec2 coords.
    textureStore(image_dst, itc.x, value1 + value2 + value4 + value5 + value6);
    // store with uvec2 coords.
    textureStore(image_dst, u32(itc.x), value1u + value2u + value4u + value5u + value6u);
}

@compute @workgroup_size(16, 1, 1)
fn depth_load(@builtin(local_invocation_id) local_id: vec3<u32>) {
    let dim: vec2<u32> = textureDimensions(image_storage_src);
    let itc: vec2<i32> = (vec2<i32>(dim * local_id.xy) % vec2<i32>(10, 20));
    let val: f32 = textureLoad(image_depth_multisampled_src, itc, i32(local_id.z));
    textureStore(image_dst, itc.x, vec4<u32>(u32(val)));
    return;
}

@group(0) @binding(0)
var image_1d: texture_1d<f32>;
@group(0) @binding(1)
var image_2d: texture_2d<f32>;
@group(0) @binding(2)
var image_2d_u32: texture_2d<u32>;
@group(0) @binding(3)
var image_2d_i32: texture_2d<i32>;
@group(0) @binding(4)
var image_2d_array: texture_2d_array<f32>;
@group(0) @binding(5)
var image_cube: texture_cube<f32>;
@group(0) @binding(6)
var image_cube_array: texture_cube_array<f32>;
@group(0) @binding(7)
var image_3d: texture_3d<f32>;
@group(0) @binding(8)
var image_aa: texture_multisampled_2d<f32>;

@vertex
fn queries() -> @builtin(position) vec4<f32> {
    let dim_1d = textureDimensions(image_1d);
    let dim_1d_lod = textureDimensions(image_1d, i32(dim_1d));
    let dim_2d = textureDimensions(image_2d);
    let dim_2d_lod = textureDimensions(image_2d, 1);
    let dim_2d_array = textureDimensions(image_2d_array);
    let dim_2d_array_lod = textureDimensions(image_2d_array, 1);
    let dim_cube = textureDimensions(image_cube);
    let dim_cube_lod = textureDimensions(image_cube, 1);
    let dim_cube_array = textureDimensions(image_cube_array);
    let dim_cube_array_lod = textureDimensions(image_cube_array, 1);
    let dim_3d = textureDimensions(image_3d);
    let dim_3d_lod = textureDimensions(image_3d, 1);
    let dim_2s_ms = textureDimensions(image_aa);

    let sum = dim_1d + dim_2d.y + dim_2d_lod.y + dim_2d_array.y + dim_2d_array_lod.y + 
        dim_cube.y + dim_cube_lod.y + dim_cube_array.y + dim_cube_array_lod.y +
        dim_3d.z + dim_3d_lod.z;
    return vec4<f32>(f32(sum));
}

@vertex
fn levels_queries() -> @builtin(position) vec4<f32> {
    let num_levels_2d = textureNumLevels(image_2d);
    let num_layers_2d = textureNumLayers(image_2d_array);
    let num_levels_2d_array = textureNumLevels(image_2d_array);
    let num_layers_2d_array = textureNumLayers(image_2d_array);
    let num_levels_cube = textureNumLevels(image_cube);
    let num_levels_cube_array = textureNumLevels(image_cube_array);
    let num_layers_cube = textureNumLayers(image_cube_array);
    let num_levels_3d = textureNumLevels(image_3d);
    let num_samples_aa = textureNumSamples(image_aa);

    let sum = num_layers_2d + num_layers_cube + num_samples_aa +
        num_levels_2d + num_levels_2d_array + num_levels_3d + num_levels_cube + num_levels_cube_array;
    return vec4<f32>(f32(sum));
}

@group(1) @binding(0)
var sampler_reg: sampler;

@fragment
fn texture_sample() -> @location(0) vec4<f32> {
    let tc = vec2<f32>(0.5);
    let tc3 = vec3<f32>(0.5);
    let level = 2.3;
    var a: vec4<f32>;
    a += textureSample(image_1d, sampler_reg, tc.x);
    a += textureSample(image_2d, sampler_reg, tc);
    a += textureSample(image_2d, sampler_reg, tc, vec2<i32>(3, 1));
    a += textureSampleLevel(image_2d, sampler_reg, tc, level);
    a += textureSampleLevel(image_2d, sampler_reg, tc, level, vec2<i32>(3, 1));
    a += textureSampleBias(image_2d, sampler_reg, tc, 2.0, vec2<i32>(3, 1));
    a += textureSample(image_2d_array, sampler_reg, tc, 0u);
    a += textureSample(image_2d_array, sampler_reg, tc, 0u, vec2<i32>(3, 1));
    a += textureSampleLevel(image_2d_array, sampler_reg, tc, 0u, level);
    a += textureSampleLevel(image_2d_array, sampler_reg, tc, 0u, level, vec2<i32>(3, 1));
    a += textureSampleBias(image_2d_array, sampler_reg, tc, 0u, 2.0, vec2<i32>(3, 1));
    a += textureSample(image_2d_array, sampler_reg, tc, 0);
    a += textureSample(image_2d_array, sampler_reg, tc, 0, vec2<i32>(3, 1));
    a += textureSampleLevel(image_2d_array, sampler_reg, tc, 0, level);
    a += textureSampleLevel(image_2d_array, sampler_reg, tc, 0, level, vec2<i32>(3, 1));
    a += textureSampleBias(image_2d_array, sampler_reg, tc, 0, 2.0, vec2<i32>(3, 1));
    a += textureSample(image_cube_array, sampler_reg, tc3, 0u);
    a += textureSampleLevel(image_cube_array, sampler_reg, tc3, 0u, level);
    a += textureSampleBias(image_cube_array, sampler_reg, tc3, 0u, 2.0);
    a += textureSample(image_cube_array, sampler_reg, tc3, 0);
    a += textureSampleLevel(image_cube_array, sampler_reg, tc3, 0, level);
    a += textureSampleBias(image_cube_array, sampler_reg, tc3, 0, 2.0);
    return a;
}

@group(1) @binding(1)
var sampler_cmp: sampler_comparison;
@group(1) @binding(2)
var image_2d_depth: texture_depth_2d;
@group(1) @binding(3)
var image_2d_array_depth: texture_depth_2d_array;
@group(1) @binding(4)
var image_cube_depth: texture_depth_cube;

@fragment
fn texture_sample_comparison() -> @location(0) f32 {
    let tc = vec2<f32>(0.5);
    let tc3 = vec3<f32>(0.5);
    let dref = 0.5;
    var a: f32;
    a += textureSampleCompare(image_2d_depth, sampler_cmp, tc, dref);
    a += textureSampleCompare(image_2d_array_depth, sampler_cmp, tc, 0u, dref);
    a += textureSampleCompare(image_2d_array_depth, sampler_cmp, tc, 0, dref);
    a += textureSampleCompare(image_cube_depth, sampler_cmp, tc3, dref);
    a += textureSampleCompareLevel(image_2d_depth, sampler_cmp, tc, dref);
    a += textureSampleCompareLevel(image_2d_array_depth, sampler_cmp, tc, 0u, dref);
    a += textureSampleCompareLevel(image_2d_array_depth, sampler_cmp, tc, 0, dref);
    a += textureSampleCompareLevel(image_cube_depth, sampler_cmp, tc3, dref);
    return a;
}

@fragment
fn gather() -> @location(0) vec4<f32> {
    let tc = vec2<f32>(0.5);
    let dref = 0.5;
    let s2d = textureGather(1, image_2d, sampler_reg, tc);
    let s2d_offset = textureGather(3, image_2d, sampler_reg, tc, vec2<i32>(3, 1));
    let s2d_depth = textureGatherCompare(image_2d_depth, sampler_cmp, tc, dref);
    let s2d_depth_offset = textureGatherCompare(image_2d_depth, sampler_cmp, tc, dref, vec2<i32>(3, 1));

    let u = textureGather(0, image_2d_u32, sampler_reg, tc);
    let i = textureGather(0, image_2d_i32, sampler_reg, tc);
    let f = vec4<f32>(u) + vec4<f32>(i);

    return s2d + s2d_offset + s2d_depth + s2d_depth_offset + f;
}

@fragment
fn depth_no_comparison() -> @location(0) vec4<f32> {
    let tc = vec2<f32>(0.5);
    let level = 1;
    let s2d = textureSample(image_2d_depth, sampler_reg, tc);
    let s2d_gather = textureGather(image_2d_depth, sampler_reg, tc);
    let s2d_level = textureSampleLevel(image_2d_depth, sampler_reg, tc, level);
    return s2d + s2d_gather + s2d_level;
}
"
OpName %32 "image_mipmapped_src"
OpName %34 "image_multisampled_src"
OpName %36 "image_depth_multisampled_src"
OpName %38 "image_storage_src"
OpName %40 "image_array_src"
OpName %42 "image_dup_src"
OpName %44 "image_1d_src"
OpName %46 "image_dst"
OpName %48 "image_1d"
OpName %50 "image_2d"
OpName %52 "image_2d_u32"
OpName %53 "image_2d_i32"
OpName %55 "image_2d_array"
OpName %57 "image_cube"
OpName %59 "image_cube_array"
OpName %61 "image_3d"
OpName %63 "image_aa"
OpName %65 "sampler_reg"
OpName %67 "sampler_cmp"
OpName %69 "image_2d_depth"
OpName %71 "image_2d_array_depth"
OpName %73 "image_cube_depth"
OpName %75 "naga_mod"
OpName %77 "lhs"
OpName %78 "rhs"
OpName %97 "local_id"
OpName %100 "main"
OpName %189 "local_id"
OpName %191 "depth_load"
OpName %211 "queries"
OpName %263 "levels_queries"
OpName %294 "texture_sample"
OpName %307 "a"
OpName %440 "texture_sample_comparison"
OpName %445 "a"
OpName %496 "gather"
OpName %530 "depth_no_comparison"
OpDecorate %32 DescriptorSet 0
OpDecorate %32 Binding 0
OpDecorate %34 DescriptorSet 0
OpDecorate %34 Binding 3
OpDecorate %36 DescriptorSet 0
OpDecorate %36 Binding 4
OpDecorate %38 NonWritable
OpDecorate %38 DescriptorSet 0
OpDecorate %38 Binding 1
OpDecorate %40 DescriptorSet 0
OpDecorate %40 Binding 5
OpDecorate %42 NonWritable
OpDecorate %42 DescriptorSet 0
OpDecorate %42 Binding 6
OpDecorate %44 DescriptorSet 0
OpDecorate %44 Binding 7
OpDecorate %46 NonReadable
OpDecorate %46 DescriptorSet 0
OpDecorate %46 Binding 2
OpDecorate %48 DescriptorSet 0
OpDecorate %48 Binding 0
OpDecorate %50 DescriptorSet 0
OpDecorate %50 Binding 1
OpDecorate %52 DescriptorSet 0
OpDecorate %52 Binding 2
OpDecorate %53 DescriptorSet 0
OpDecorate %53 Binding 3
OpDecorate %55 DescriptorSet 0
OpDecorate %55 Binding 4
OpDecorate %57 DescriptorSet 0
OpDecorate %57 Binding 5
OpDecorate %59 DescriptorSet 0
OpDecorate %59 Binding 6
OpDecorate %61 DescriptorSet 0
OpDecorate %61 Binding 7
OpDecorate %63 DescriptorSet 0
OpDecorate %63 Binding 8
OpDecorate %65 DescriptorSet 1
OpDecorate %65 Binding 0
OpDecorate %67 DescriptorSet 1
OpDecorate %67 Binding 1
OpDecorate %69 DescriptorSet 1
OpDecorate %69 Binding 2
OpDecorate %71 DescriptorSet 1
OpDecorate %71 Binding 3
OpDecorate %73 DescriptorSet 1
OpDecorate %73 Binding 4
OpDecorate %97 BuiltIn LocalInvocationId
OpDecorate %189 BuiltIn LocalInvocationId
OpDecorate %209 BuiltIn Position
OpDecorate %262 BuiltIn Position
OpDecorate %293 Location 0
OpDecorate %438 Location 0
OpDecorate %495 Location 0
OpDecorate %529 Location 0
%2 = OpTypeVoid
%5 = OpTypeInt 32 0
%4 = OpTypeImage %5 2D 0 0 0 1 Unknown
%6 = OpTypeImage %5 2D 0 0 1 1 Unknown
%8 = OpTypeFloat 32
%7 = OpTypeImage %8 2D 1 0 1 1 Unknown
%9 = OpTypeImage %5 2D 0 0 0 2 Rgba8ui
%10 = OpTypeImage %5 2D 0 1 0 1 Unknown
%11 = OpTypeImage %5 1D 0 0 0 2 R32ui
%12 = OpTypeImage %5 1D 0 0 0 1 Unknown
%13 = OpTypeVector %5 3
%15 = OpTypeInt 32 1
%14 = OpTypeVector %15 2
%16 = OpTypeImage %8 1D 0 0 0 1 Unknown
%17 = OpTypeImage %8 2D 0 0 0 1 Unknown
%18 = OpTypeImage %15 2D 0 0 0 1 Unknown
%19 = OpTypeImage %8 2D 0 1 0 1 Unknown
%20 = OpTypeImage %8 Cube 0 0 0 1 Unknown
%21 = OpTypeImage %8 Cube 0 1 0 1 Unknown
%22 = OpTypeImage %8 3D 0 0 0 1 Unknown
%23 = OpTypeImage %8 2D 0 0 1 1 Unknown
%24 = OpTypeVector %8 4
%25 = OpTypeSampler
%26 = OpTypeImage %8 2D 1 0 0 1 Unknown
%27 = OpTypeImage %8 2D 1 1 0 1 Unknown
%28 = OpTypeImage %8 Cube 1 0 0 1 Unknown
%29 = OpConstant  %15  3
%30 = OpConstant  %15  1
%31 = OpConstantComposite  %14  %29 %30
%33 = OpTypePointer UniformConstant %4
%32 = OpVariable  %33  UniformConstant
%35 = OpTypePointer UniformConstant %6
%34 = OpVariable  %35  UniformConstant
%37 = OpTypePointer UniformConstant %7
%36 = OpVariable  %37  UniformConstant
%39 = OpTypePointer UniformConstant %9
%38 = OpVariable  %39  UniformConstant
%41 = OpTypePointer UniformConstant %10
%40 = OpVariable  %41  UniformConstant
%43 = OpTypePointer UniformConstant %11
%42 = OpVariable  %43  UniformConstant
%45 = OpTypePointer UniformConstant %12
%44 = OpVariable  %45  UniformConstant
%47 = OpTypePointer UniformConstant %11
%46 = OpVariable  %47  UniformConstant
%49 = OpTypePointer UniformConstant %16
%48 = OpVariable  %49  UniformConstant
%51 = OpTypePointer UniformConstant %17
%50 = OpVariable  %51  UniformConstant
%52 = OpVariable  %33  UniformConstant
%54 = OpTypePointer UniformConstant %18
%53 = OpVariable  %54  UniformConstant
%56 = OpTypePointer UniformConstant %19
%55 = OpVariable  %56  UniformConstant
%58 = OpTypePointer UniformConstant %20
%57 = OpVariable  %58  UniformConstant
%60 = OpTypePointer UniformConstant %21
%59 = OpVariable  %60  UniformConstant
%62 = OpTypePointer UniformConstant %22
%61 = OpVariable  %62  UniformConstant
%64 = OpTypePointer UniformConstant %23
%63 = OpVariable  %64  UniformConstant
%66 = OpTypePointer UniformConstant %25
%65 = OpVariable  %66  UniformConstant
%68 = OpTypePointer UniformConstant %25
%67 = OpVariable  %68  UniformConstant
%70 = OpTypePointer UniformConstant %26
%69 = OpVariable  %70  UniformConstant
%72 = OpTypePointer UniformConstant %27
%71 = OpVariable  %72  UniformConstant
%74 = OpTypePointer UniformConstant %28
%73 = OpVariable  %74  UniformConstant
%76 = OpTypeFunction %14 %14 %14
%81 = OpTypeBool
%80 = OpTypeVector %81 2
%82 = OpConstant  %15  0
%83 = OpConstantComposite  %14  %82 %82
%85 = OpConstant  %15  -2147483648
%86 = OpConstant  %15  -1
%87 = OpConstantComposite  %14  %85 %85
%88 = OpConstantComposite  %14  %86 %86
%93 = OpConstantComposite  %14  %30 %30
%98 = OpTypePointer Input %13
%97 = OpVariable  %98  Input
%101 = OpTypeFunction %2
%108 = OpConstant  %15  10
%109 = OpConstant  %15  20
%110 = OpConstantComposite  %14  %108 %109
%112 = OpTypeVector %5 2
%120 = OpTypeVector %5 4
%131 = OpTypeVector %15 3
%189 = OpVariable  %98  Input
%210 = OpTypePointer Output %24
%209 = OpVariable  %210  Output
%220 = OpConstant  %5  0
%262 = OpVariable  %210  Output
%293 = OpVariable  %210  Output
%300 = OpConstant  %8  0.5
%301 = OpTypeVector %8 2
%302 = OpConstantComposite  %301  %300 %300
%303 = OpTypeVector %8 3
%304 = OpConstantComposite  %303  %300 %300 %300
%305 = OpConstant  %8  2.3
%306 = OpConstant  %8  2.0
%308 = OpTypePointer Function %24
%309 = OpConstantNull  %24
%312 = OpTypeSampledImage %16
%317 = OpTypeSampledImage %17
%338 = OpTypeSampledImage %19
%399 = OpTypeSampledImage %21
%439 = OpTypePointer Output %8
%438 = OpVariable  %439  Output
%446 = OpTypePointer Function %8
%447 = OpConstantNull  %8
%449 = OpTypeSampledImage %26
%454 = OpTypeSampledImage %27
%467 = OpTypeSampledImage %28
%474 = OpConstant  %8  0.0
%495 = OpVariable  %210  Output
%506 = OpConstant  %5  1
%509 = OpConstant  %5  3
%514 = OpTypeSampledImage %4
%517 = OpTypeVector %15 4
%518 = OpTypeSampledImage %18
%529 = OpVariable  %210  Output
%75 = OpFunction  %14  None %76
%77 = OpFunctionParameter  %14
%78 = OpFunctionParameter  %14
%79 = OpLabel
%84 = OpIEqual  %80  %78 %83
%89 = OpIEqual  %80  %77 %87
%90 = OpIEqual  %80  %78 %88
%91 = OpLogicalAnd  %80  %89 %90
%92 = OpLogicalOr  %80  %84 %91
%94 = OpSelect  %14  %92 %93 %78
%95 = OpSRem  %14  %77 %94
OpReturnValue %95
OpFunctionEnd
%100 = OpFunction  %2  None %101
%96 = OpLabel
%99 = OpLoad  %13  %97
%102 = OpLoad  %4  %32
%103 = OpLoad  %6  %34
%104 = OpLoad  %9  %38
%105 = OpLoad  %10  %40
%106 = OpLoad  %12  %44
%107 = OpLoad  %11  %46
OpBranch %111
%111 = OpLabel
OpLine %3 20 15
%113 = OpImageQuerySize  %112  %104
OpLine %3 21 15
%114 = OpVectorShuffle  %112  %99 %99 0 1
%115 = OpIMul  %112  %113 %114
%116 = OpBitcast  %14  %115
OpLine %3 21 15
%117 = OpFunctionCall  %14  %75 %116 %110
OpLine %3 23 18
%118 = OpCompositeExtract  %5  %99 2
%119 = OpBitcast  %15  %118
%121 = OpImageFetch  %120  %102 %117 Lod %119
OpLine %3 24 18
%122 = OpCompositeExtract  %5  %99 2
%123 = OpBitcast  %15  %122
%124 = OpImageFetch  %120  %103 %117 Sample %123
OpLine %3 25 18
%125 = OpImageRead  %120  %104 %117
OpLine %3 26 52
%126 = OpCompositeExtract  %5  %99 2
%127 = OpCompositeExtract  %5  %99 2
%128 = OpBitcast  %15  %127
OpLine %3 26 18
%129 = OpIAdd  %15  %128 %30
%130 = OpBitcast  %15  %126
%132 = OpCompositeConstruct  %131  %117 %130
%133 = OpImageFetch  %120  %105 %132 Lod %129
OpLine %3 27 52
%134 = OpCompositeExtract  %5  %99 2
%135 = OpBitcast  %15  %134
%136 = OpCompositeExtract  %5  %99 2
%137 = OpBitcast  %15  %136
OpLine %3 27 18
%138 = OpIAdd  %15  %137 %30
%139 = OpCompositeConstruct  %131  %117 %135
%140 = OpImageFetch  %120  %105 %139 Lod %138
OpLine %3 28 18
%141 = OpCompositeExtract  %5  %99 0
%142 = OpBitcast  %15  %141
%143 = OpCompositeExtract  %5  %99 2
%144 = OpBitcast  %15  %143
%145 = OpImageFetch  %120  %106 %142 Lod %144
OpLine %3 30 19
%146 = OpBitcast  %112  %117
%147 = OpCompositeExtract  %5  %99 2
%148 = OpBitcast  %15  %147
%149 = OpImageFetch  %120  %102 %146 Lod %148
OpLine %3 31 19
%150 = OpBitcast  %112  %117
%151 = OpCompositeExtract  %5  %99 2
%152 = OpBitcast  %15  %151
%153 = OpImageFetch  %120  %103 %150 Sample %152
OpLine %3 32 19
%154 = OpBitcast  %112  %117
%155 = OpImageRead  %120  %104 %154
OpLine %3 33 48
%156 = OpBitcast  %112  %117
%157 = OpCompositeExtract  %5  %99 2
%158 = OpCompositeExtract  %5  %99 2
%159 = OpBitcast  %15  %158
OpLine %3 33 19
%160 = OpIAdd  %15  %159 %30
%161 = OpCompositeConstruct  %13  %156 %157
%162 = OpImageFetch  %120  %105 %161 Lod %160
OpLine %3 34 48
%163 = OpBitcast  %112  %117
%164 = OpCompositeExtract  %5  %99 2
%165 = OpBitcast  %15  %164
%166 = OpCompositeExtract  %5  %99 2
%167 = OpBitcast  %15  %166
OpLine %3 34 19
%168 = OpIAdd  %15  %167 %30
%169 = OpBitcast  %5  %165
%170 = OpCompositeConstruct  %13  %163 %169
%171 = OpImageFetch  %120  %105 %170 Lod %168
OpLine %3 35 19
%172 = OpCompositeExtract  %5  %99 0
%174 = OpCompositeExtract  %5  %99 2
%175 = OpBitcast  %15  %174
%176 = OpImageFetch  %120  %106 %172 Lod %175
OpLine %3 37 29
%177 = OpCompositeExtract  %15  %117 0
%178 = OpIAdd  %120  %121 %124
%179 = OpIAdd  %120  %178 %125
%180 = OpIAdd  %120  %179 %133
%181 = OpIAdd  %120  %180 %140
OpLine %3 37 5
OpImageWrite %107 %177 %181
OpLine %3 39 29
%182 = OpCompositeExtract  %15  %117 0
%183 = OpBitcast  %5  %182
%184 = OpIAdd  %120  %149 %153
%185 = OpIAdd  %120  %184 %155
%186 = OpIAdd  %120  %185 %162
%187 = OpIAdd  %120  %186 %171
OpLine %3 39 5
OpImageWrite %107 %183 %187
OpReturn
OpFunctionEnd
%191 = OpFunction  %2  None %101
%188 = OpLabel
%190 = OpLoad  %13  %189
%192 = OpLoad  %7  %36
%193 = OpLoad  %9  %38
%194 = OpLoad  %11  %46
OpBranch %195
%195 = OpLabel
OpLine %3 44 26
%196 = OpImageQuerySize  %112  %193
OpLine %3 45 27
%197 = OpVectorShuffle  %112  %190 %190 0 1
%198 = OpIMul  %112  %196 %197
%199 = OpBitcast  %14  %198
OpLine %3 45 27
%200 = OpFunctionCall  %14  %75 %199 %110
OpLine %3 46 20
%201 = OpCompositeExtract  %5  %190 2
%202 = OpBitcast  %15  %201
%203 = OpImageFetch  %24  %192 %200 Sample %202
%204 = OpCompositeExtract  %8  %203 0
OpLine %3 47 29
%205 = OpCompositeExtract  %15  %200 0
%206 = OpConvertFToU  %5  %204
%207 = OpCompositeConstruct  %120  %206 %206 %206 %206
OpLine %3 47 5
OpImageWrite %194 %205 %207
OpReturn
OpFunctionEnd
%211 = OpFunction  %2  None %101
%208 = OpLabel
%212 = OpLoad  %16  %48
%213 = OpLoad  %17  %50
%214 = OpLoad  %19  %55
%215 = OpLoad  %20  %57
%216 = OpLoad  %21  %59
%217 = OpLoad  %22  %61
%218 = OpLoad  %23  %63
OpBranch %219
%219 = OpLabel
OpLine %3 72 18
%221 = OpImageQuerySizeLod  %5  %212 %220
OpLine %3 73 22
%222 = OpBitcast  %15  %221
%223 = OpImageQuerySizeLod  %5  %212 %222
OpLine %3 74 18
%224 = OpImageQuerySizeLod  %112  %213 %220
OpLine %3 75 22
%225 = OpImageQuerySizeLod  %112  %213 %30
OpLine %3 76 24
%226 = OpImageQuerySizeLod  %13  %214 %220
%227 = OpVectorShuffle  %112  %226 %226 0 1
OpLine %3 77 28
%228 = OpImageQuerySizeLod  %13  %214 %30
%229 = OpVectorShuffle  %112  %228 %228 0 1
OpLine %3 78 20
%230 = OpImageQuerySizeLod  %112  %215 %220
OpLine %3 79 24
%231 = OpImageQuerySizeLod  %112  %215 %30
OpLine %3 80 26
%232 = OpImageQuerySizeLod  %13  %216 %220
%233 = OpVectorShuffle  %112  %232 %232 0 0
OpLine %3 81 30
%234 = OpImageQuerySizeLod  %13  %216 %30
%235 = OpVectorShuffle  %112  %234 %234 0 0
OpLine %3 82 18
%236 = OpImageQuerySizeLod  %13  %217 %220
OpLine %3 83 22
%237 = OpImageQuerySizeLod  %13  %217 %30
OpLine %3 84 21
%238 = OpImageQuerySize  %112  %218
OpLine %3 86 15
%239 = OpCompositeExtract  %5  %224 1
%240 = OpIAdd  %5  %221 %239
%241 = OpCompositeExtract  %5  %225 1
%242 = OpIAdd  %5  %240 %241
%243 = OpCompositeExtract  %5  %227 1
%244 = OpIAdd  %5  %242 %243
%245 = OpCompositeExtract  %5  %229 1
%246 = OpIAdd  %5  %244 %245
%247 = OpCompositeExtract  %5  %230 1
%248 = OpIAdd  %5  %246 %247
%249 = OpCompositeExtract  %5  %231 1
%250 = OpIAdd  %5  %248 %249
%251 = OpCompositeExtract  %5  %233 1
%252 = OpIAdd  %5  %250 %251
%253 = OpCompositeExtract  %5  %235 1
%254 = OpIAdd  %5  %252 %253
%255 = OpCompositeExtract  %5  %236 2
%256 = OpIAdd  %5  %254 %255
%257 = OpCompositeExtract  %5  %237 2
%258 = OpIAdd  %5  %256 %257
OpLine %3 89 12
%259 = OpConvertUToF  %8  %258
%260 = OpCompositeConstruct  %24  %259 %259 %259 %259
OpStore %209 %260
OpReturn
OpFunctionEnd
%263 = OpFunction  %2  None %101
%261 = OpLabel
%264 = OpLoad  %17  %50
%265 = OpLoad  %19  %55
%266 = OpLoad  %20  %57
%267 = OpLoad  %21  %59
%268 = OpLoad  %22  %61
%269 = OpLoad  %23  %63
OpBranch %270
%270 = OpLabel
OpLine %3 94 25
%271 = OpImageQueryLevels  %5  %264
OpLine %3 95 25
%272 = OpImageQuerySizeLod  %13  %265 %220
%273 = OpCompositeExtract  %5  %272 2
OpLine %3 96 31
%274 = OpImageQueryLevels  %5  %265
OpLine %3 97 31
%275 = OpImageQuerySizeLod  %13  %265 %220
%276 = OpCompositeExtract  %5  %275 2
OpLine %3 98 27
%277 = OpImageQueryLevels  %5  %266
OpLine %3 99 33
%278 = OpImageQueryLevels  %5  %267
OpLine %3 100 27
%279 = OpImageQuerySizeLod  %13  %267 %220
%280 = OpCompositeExtract  %5  %279 2
OpLine %3 101 25
%281 = OpImageQueryLevels  %5  %268
OpLine %3 102 26
%282 = OpImageQuerySamples  %5  %269
OpLine %3 104 15
%283 = OpIAdd  %5  %273 %280
%284 = OpIAdd  %5  %283 %282
%285 = OpIAdd  %5  %284 %271
%286 = OpIAdd  %5  %285 %274
%287 = OpIAdd  %5  %286 %281
%288 = OpIAdd  %5  %287 %277
%289 = OpIAdd  %5  %288 %278
OpLine %3 106 12
%290 = OpConvertUToF  %8  %289
%291 = OpCompositeConstruct  %24  %290 %290 %290 %290
OpStore %262 %291
OpReturn
OpFunctionEnd
%294 = OpFunction  %2  None %101
%292 = OpLabel
%307 = OpVariable  %308  Function %309
%295 = OpLoad  %16  %48
%296 = OpLoad  %17  %50
%297 = OpLoad  %19  %55
%298 = OpLoad  %21  %59
%299 = OpLoad  %25  %65
OpBranch %310
%310 = OpLabel
OpLine %3 114 14
OpLine %3 115 15
OpLine %3 118 5
%311 = OpCompositeExtract  %8  %302 0
%313 = OpSampledImage  %312  %295 %299
%314 = OpImageSampleImplicitLod  %24  %313 %311
%315 = OpLoad  %24  %307
%316 = OpFAdd  %24  %315 %314
OpLine %3 118 5
OpStore %307 %316
OpLine %3 119 5
%318 = OpSampledImage  %317  %296 %299
%319 = OpImageSampleImplicitLod  %24  %318 %302
%320 = OpLoad  %24  %307
%321 = OpFAdd  %24  %320 %319
OpLine %3 119 5
OpStore %307 %321
OpLine %3 120 5
%322 = OpSampledImage  %317  %296 %299
%323 = OpImageSampleImplicitLod  %24  %322 %302 ConstOffset %31
%324 = OpLoad  %24  %307
%325 = OpFAdd  %24  %324 %323
OpLine %3 120 5
OpStore %307 %325
OpLine %3 121 5
%326 = OpSampledImage  %317  %296 %299
%327 = OpImageSampleExplicitLod  %24  %326 %302 Lod %305
%328 = OpLoad  %24  %307
%329 = OpFAdd  %24  %328 %327
OpLine %3 121 5
OpStore %307 %329
OpLine %3 122 5
%330 = OpSampledImage  %317  %296 %299
%331 = OpImageSampleExplicitLod  %24  %330 %302 Lod|ConstOffset %305 %31
%332 = OpLoad  %24  %307
%333 = OpFAdd  %24  %332 %331
OpLine %3 122 5
OpStore %307 %333
OpLine %3 123 5
%334 = OpSampledImage  %317  %296 %299
%335 = OpImageSampleImplicitLod  %24  %334 %302 Bias|ConstOffset %306 %31
%336 = OpLoad  %24  %307
%337 = OpFAdd  %24  %336 %335
OpLine %3 123 5
OpStore %307 %337
OpLine %3 124 5
%339 = OpConvertUToF  %8  %220
%340 = OpCompositeConstruct  %303  %302 %339
%341 = OpSampledImage  %338  %297 %299
%342 = OpImageSampleImplicitLod  %24  %341 %340
%343 = OpLoad  %24  %307
%344 = OpFAdd  %24  %343 %342
OpLine %3 124 5
OpStore %307 %344
OpLine %3 125 5
%345 = OpConvertUToF  %8  %220
%346 = OpCompositeConstruct  %303  %302 %345
%347 = OpSampledImage  %338  %297 %299
%348 = OpImageSampleImplicitLod  %24  %347 %346 ConstOffset %31
%349 = OpLoad  %24  %307
%350 = OpFAdd  %24  %349 %348
OpLine %3 125 5
OpStore %307 %350
OpLine %3 126 5
%351 = OpConvertUToF  %8  %220
%352 = OpCompositeConstruct  %303  %302 %351
%353 = OpSampledImage  %338  %297 %299
%354 = OpImageSampleExplicitLod  %24  %353 %352 Lod %305
%355 = OpLoad  %24  %307
%356 = OpFAdd  %24  %355 %354
OpLine %3 126 5
OpStore %307 %356
OpLine %3 127 5
%357 = OpConvertUToF  %8  %220
%358 = OpCompositeConstruct  %303  %302 %357
%359 = OpSampledImage  %338  %297 %299
%360 = OpImageSampleExplicitLod  %24  %359 %358 Lod|ConstOffset %305 %31
%361 = OpLoad  %24  %307
%362 = OpFAdd  %24  %361 %360
OpLine %3 127 5
OpStore %307 %362
OpLine %3 128 5
%363 = OpConvertUToF  %8  %220
%364 = OpCompositeConstruct  %303  %302 %363
%365 = OpSampledImage  %338  %297 %299
%366 = OpImageSampleImplicitLod  %24  %365 %364 Bias|ConstOffset %306 %31
%367 = OpLoad  %24  %307
%368 = OpFAdd  %24  %367 %366
OpLine %3 128 5
OpStore %307 %368
OpLine %3 129 5
%369 = OpConvertSToF  %8  %82
%370 = OpCompositeConstruct  %303  %302 %369
%371 = OpSampledImage  %338  %297 %299
%372 = OpImageSampleImplicitLod  %24  %371 %370
%373 = OpLoad  %24  %307
%374 = OpFAdd  %24  %373 %372
OpLine %3 129 5
OpStore %307 %374
OpLine %3 130 5
%375 = OpConvertSToF  %8  %82
%376 = OpCompositeConstruct  %303  %302 %375
%377 = OpSampledImage  %338  %297 %299
%378 = OpImageSampleImplicitLod  %24  %377 %376 ConstOffset %31
%379 = OpLoad  %24  %307
%380 = OpFAdd  %24  %379 %378
OpLine %3 130 5
OpStore %307 %380
OpLine %3 131 5
%381 = OpConvertSToF  %8  %82
%382 = OpCompositeConstruct  %303  %302 %381
%383 = OpSampledImage  %338  %297 %299
%384 = OpImageSampleExplicitLod  %24  %383 %382 Lod %305
%385 = OpLoad  %24  %307
%386 = OpFAdd  %24  %385 %384
OpLine %3 131 5
OpStore %307 %386
OpLine %3 132 5
%387 = OpConvertSToF  %8  %82
%388 = OpCompositeConstruct  %303  %302 %387
%389 = OpSampledImage  %338  %297 %299
%390 = OpImageSampleExplicitLod  %24  %389 %388 Lod|ConstOffset %305 %31
%391 = OpLoad  %24  %307
%392 = OpFAdd  %24  %391 %390
OpLine %3 132 5
OpStore %307 %392
OpLine %3 133 5
%393 = OpConvertSToF  %8  %82
%394 = OpCompositeConstruct  %303  %302 %393
%395 = OpSampledImage  %338  %297 %299
%396 = OpImageSampleImplicitLod  %24  %395 %394 Bias|ConstOffset %306 %31
%397 = OpLoad  %24  %307
%398 = OpFAdd  %24  %397 %396
OpLine %3 133 5
OpStore %307 %398
OpLine %3 134 5
%400 = OpConvertUToF  %8  %220
%401 = OpCompositeConstruct  %24  %304 %400
%402 = OpSampledImage  %399  %298 %299
%403 = OpImageSampleImplicitLod  %24  %402 %401
%404 = OpLoad  %24  %307
%405 = OpFAdd  %24  %404 %403
OpLine %3 134 5
OpStore %307 %405
OpLine %3 135 5
%406 = OpConvertUToF  %8  %220
%407 = OpCompositeConstruct  %24  %304 %406
%408 = OpSampledImage  %399  %298 %299
%409 = OpImageSampleExplicitLod  %24  %408 %407 Lod %305
%410 = OpLoad  %24  %307
%411 = OpFAdd  %24  %410 %409
OpLine %3 135 5
OpStore %307 %411
OpLine %3 136 5
%412 = OpConvertUToF  %8  %220
%413 = OpCompositeConstruct  %24  %304 %412
%414 = OpSampledImage  %399  %298 %299
%415 = OpImageSampleImplicitLod  %24  %414 %413 Bias %306
%416 = OpLoad  %24  %307
%417 = OpFAdd  %24  %416 %415
OpLine %3 136 5
OpStore %307 %417
OpLine %3 137 5
%418 = OpConvertSToF  %8  %82
%419 = OpCompositeConstruct  %24  %304 %418
%420 = OpSampledImage  %399  %298 %299
%421 = OpImageSampleImplicitLod  %24  %420 %419
%422 = OpLoad  %24  %307
%423 = OpFAdd  %24  %422 %421
OpLine %3 137 5
OpStore %307 %423
OpLine %3 138 5
%424 = OpConvertSToF  %8  %82
%425 = OpCompositeConstruct  %24  %304 %424
%426 = OpSampledImage  %399  %298 %299
%427 = OpImageSampleExplicitLod  %24  %426 %425 Lod %305
%428 = OpLoad  %24  %307
%429 = OpFAdd  %24  %428 %427
OpLine %3 138 5
OpStore %307 %429
OpLine %3 139 5
%430 = OpConvertSToF  %8  %82
%431 = OpCompositeConstruct  %24  %304 %430
%432 = OpSampledImage  %399  %298 %299
%433 = OpImageSampleImplicitLod  %24  %432 %431 Bias %306
%434 = OpLoad  %24  %307
%435 = OpFAdd  %24  %434 %433
OpLine %3 139 5
OpStore %307 %435
OpLine %3 1 1
%436 = OpLoad  %24  %307
OpStore %293 %436
OpReturn
OpFunctionEnd
%440 = OpFunction  %2  None %101
%437 = OpLabel
%445 = OpVariable  %446  Function %447
%441 = OpLoad  %25  %67
%442 = OpLoad  %26  %69
%443 = OpLoad  %27  %71
%444 = OpLoad  %28  %73
OpBranch %448
%448 = OpLabel
OpLine %3 154 14
OpLine %3 155 15
OpLine %3 158 5
%450 = OpSampledImage  %449  %442 %441
%451 = OpImageSampleDrefImplicitLod  %8  %450 %302 %300
%452 = OpLoad  %8  %445
%453 = OpFAdd  %8  %452 %451
OpLine %3 158 5
OpStore %445 %453
OpLine %3 159 5
%455 = OpConvertUToF  %8  %220
%456 = OpCompositeConstruct  %303  %302 %455
%457 = OpSampledImage  %454  %443 %441
%458 = OpImageSampleDrefImplicitLod  %8  %457 %456 %300
%459 = OpLoad  %8  %445
%460 = OpFAdd  %8  %459 %458
OpLine %3 159 5
OpStore %445 %460
OpLine %3 160 5
%461 = OpConvertSToF  %8  %82
%462 = OpCompositeConstruct  %303  %302 %461
%463 = OpSampledImage  %454  %443 %441
%464 = OpImageSampleDrefImplicitLod  %8  %463 %462 %300
%465 = OpLoad  %8  %445
%466 = OpFAdd  %8  %465 %464
OpLine %3 160 5
OpStore %445 %466
OpLine %3 161 5
%468 = OpSampledImage  %467  %444 %441
%469 = OpImageSampleDrefImplicitLod  %8  %468 %304 %300
%470 = OpLoad  %8  %445
%471 = OpFAdd  %8  %470 %469
OpLine %3 161 5
OpStore %445 %471
OpLine %3 162 5
%472 = OpSampledImage  %449  %442 %441
%473 = OpImageSampleDrefExplicitLod  %8  %472 %302 %300 Lod %474
%475 = OpLoad  %8  %445
%476 = OpFAdd  %8  %475 %473
OpLine %3 162 5
OpStore %445 %476
OpLine %3 163 5
%477 = OpConvertUToF  %8  %220
%478 = OpCompositeConstruct  %303  %302 %477
%479 = OpSampledImage  %454  %443 %441
%480 = OpImageSampleDrefExplicitLod  %8  %479 %478 %300 Lod %474
%481 = OpLoad  %8  %445
%482 = OpFAdd  %8  %481 %480
OpLine %3 163 5
OpStore %445 %482
OpLine %3 164 5
%483 = OpConvertSToF  %8  %82
%484 = OpCompositeConstruct  %303  %302 %483
%485 = OpSampledImage  %454  %443 %441
%486 = OpImageSampleDrefExplicitLod  %8  %485 %484 %300 Lod %474
%487 = OpLoad  %8  %445
%488 = OpFAdd  %8  %487 %486
OpLine %3 164 5
OpStore %445 %488
OpLine %3 165 5
%489 = OpSampledImage  %467  %444 %441
%490 = OpImageSampleDrefExplicitLod  %8  %489 %304 %300 Lod %474
%491 = OpLoad  %8  %445
%492 = OpFAdd  %8  %491 %490
OpLine %3 165 5
OpStore %445 %492
OpLine %3 1 1
%493 = OpLoad  %8  %445
OpStore %438 %493
OpReturn
OpFunctionEnd
%496 = OpFunction  %2  None %101
%494 = OpLabel
%497 = OpLoad  %17  %50
%498 = OpLoad  %4  %52
%499 = OpLoad  %18  %53
%500 = OpLoad  %25  %65
%501 = OpLoad  %25  %67
%502 = OpLoad  %26  %69
OpBranch %503
%503 = OpLabel
OpLine %3 171 14
OpLine %3 173 15
%504 = OpSampledImage  %317  %497 %500
%505 = OpImageGather  %24  %504 %302 %506
OpLine %3 174 22
%507 = OpSampledImage  %317  %497 %500
%508 = OpImageGather  %24  %507 %302 %509 ConstOffset %31
OpLine %3 175 21
%510 = OpSampledImage  %449  %502 %501
%511 = OpImageDrefGather  %24  %510 %302 %300
OpLine %3 176 28
%512 = OpSampledImage  %449  %502 %501
%513 = OpImageDrefGather  %24  %512 %302 %300 ConstOffset %31
OpLine %3 178 13
%515 = OpSampledImage  %514  %498 %500
%516 = OpImageGather  %120  %515 %302 %220
OpLine %3 179 13
%519 = OpSampledImage  %518  %499 %500
%520 = OpImageGather  %517  %519 %302 %220
OpLine %3 180 13
%521 = OpConvertUToF  %24  %516
%522 = OpConvertSToF  %24  %520
%523 = OpFAdd  %24  %521 %522
OpLine %3 182 12
%524 = OpFAdd  %24  %505 %508
%525 = OpFAdd  %24  %524 %511
%526 = OpFAdd  %24  %525 %513
%527 = OpFAdd  %24  %526 %523
OpStore %495 %527
OpReturn
OpFunctionEnd
%530 = OpFunction  %2  None %101
%528 = OpLabel
%531 = OpLoad  %25  %65
%532 = OpLoad  %26  %69
OpBranch %533
%533 = OpLabel
OpLine %3 187 14
OpLine %3 189 15
%534 = OpSampledImage  %449  %532 %531
%535 = OpImageSampleImplicitLod  %24  %534 %302
%536 = OpCompositeExtract  %8  %535 0
OpLine %3 190 22
%537 = OpSampledImage  %449  %532 %531
%538 = OpImageGather  %24  %537 %302 %220
OpLine %3 191 21
%539 = OpSampledImage  %449  %532 %531
%541 = OpConvertSToF  %8  %30
%540 = OpImageSampleExplicitLod  %24  %539 %302 Lod %541
%542 = OpCompositeExtract  %8  %540 0
OpLine %3 189 15
%543 = OpCompositeConstruct  %24  %536 %536 %536 %536
%544 = OpFAdd  %24  %543 %538
%545 = OpCompositeConstruct  %24  %542 %542 %542 %542
%546 = OpFAdd  %24  %544 %545
OpStore %529 %546
OpReturn
OpFunctionEnd