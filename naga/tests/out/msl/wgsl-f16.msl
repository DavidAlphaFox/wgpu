// language: metal1.0
#include <metal_stdlib>
#include <simd/simd.h>

using metal::uint;

struct UniformCompatible {
    uint val_u32_;
    int val_i32_;
    float val_f32_;
    half val_f16_;
    char _pad4[2];
    metal::half2 val_f16_2_;
    char _pad5[4];
    metal::half3 val_f16_3_;
    metal::half4 val_f16_4_;
    half final_value;
    char _pad8[2];
    metal::half2x2 val_mat2x2_;
    char _pad9[4];
    metal::half2x3 val_mat2x3_;
    metal::half2x4 val_mat2x4_;
    metal::half3x2 val_mat3x2_;
    char _pad12[4];
    metal::half3x3 val_mat3x3_;
    metal::half3x4 val_mat3x4_;
    metal::half4x2 val_mat4x2_;
    metal::half4x3 val_mat4x3_;
    metal::half4x4 val_mat4x4_;
};
struct type_16 {
    half inner[2];
};
struct StorageCompatible {
    type_16 val_f16_array_2_;
};
struct LayoutTest {
    half scalar1_;
    half scalar2_;
    char _pad2[4];
    metal::packed_half3 v3_;
    half tuck_in;
    half scalar4_;
    char _pad5[2];
    uint larger;
};
constant half constant_variable = 15.203125h;

half f16_function(
    half x,
    constant UniformCompatible& input_uniform,
    device UniformCompatible const& input_storage,
    device StorageCompatible const& input_arrays,
    device UniformCompatible& output,
    device StorageCompatible& output_arrays
) {
    half val = 15.203125h;
    half _e4 = val;
    val = _e4 + -33344.0h;
    half _e6 = val;
    half _e9 = val;
    val = _e9 + (_e6 + 5.0h);
    float _e13 = input_uniform.val_f32_;
    half _e14 = val;
    half _e18 = val;
    val = _e18 + static_cast<half>(_e13 + static_cast<float>(_e14));
    half _e22 = input_uniform.val_f16_;
    half _e25 = val;
    val = _e25 + metal::half3(_e22).z;
    output.val_i32_ = 65504;
    output.val_i32_ = -65504;
    output.val_u32_ = 65504u;
    output.val_u32_ = 0u;
    output.val_f32_ = 65504.0;
    output.val_f32_ = -65504.0;
    half _e49 = input_uniform.val_f16_;
    half _e52 = input_storage.val_f16_;
    output.val_f16_ = _e49 + _e52;
    metal::half2 _e58 = input_uniform.val_f16_2_;
    metal::half2 _e61 = input_storage.val_f16_2_;
    output.val_f16_2_ = _e58 + _e61;
    metal::half3 _e67 = input_uniform.val_f16_3_;
    metal::half3 _e70 = input_storage.val_f16_3_;
    output.val_f16_3_ = _e67 + _e70;
    metal::half4 _e76 = input_uniform.val_f16_4_;
    metal::half4 _e79 = input_storage.val_f16_4_;
    output.val_f16_4_ = _e76 + _e79;
    metal::half2x2 _e85 = input_uniform.val_mat2x2_;
    metal::half2x2 _e88 = input_storage.val_mat2x2_;
    output.val_mat2x2_ = _e85 + _e88;
    metal::half2x3 _e94 = input_uniform.val_mat2x3_;
    metal::half2x3 _e97 = input_storage.val_mat2x3_;
    output.val_mat2x3_ = _e94 + _e97;
    metal::half2x4 _e103 = input_uniform.val_mat2x4_;
    metal::half2x4 _e106 = input_storage.val_mat2x4_;
    output.val_mat2x4_ = _e103 + _e106;
    metal::half3x2 _e112 = input_uniform.val_mat3x2_;
    metal::half3x2 _e115 = input_storage.val_mat3x2_;
    output.val_mat3x2_ = _e112 + _e115;
    metal::half3x3 _e121 = input_uniform.val_mat3x3_;
    metal::half3x3 _e124 = input_storage.val_mat3x3_;
    output.val_mat3x3_ = _e121 + _e124;
    metal::half3x4 _e130 = input_uniform.val_mat3x4_;
    metal::half3x4 _e133 = input_storage.val_mat3x4_;
    output.val_mat3x4_ = _e130 + _e133;
    metal::half4x2 _e139 = input_uniform.val_mat4x2_;
    metal::half4x2 _e142 = input_storage.val_mat4x2_;
    output.val_mat4x2_ = _e139 + _e142;
    metal::half4x3 _e148 = input_uniform.val_mat4x3_;
    metal::half4x3 _e151 = input_storage.val_mat4x3_;
    output.val_mat4x3_ = _e148 + _e151;
    metal::half4x4 _e157 = input_uniform.val_mat4x4_;
    metal::half4x4 _e160 = input_storage.val_mat4x4_;
    output.val_mat4x4_ = _e157 + _e160;
    type_16 _e166 = input_arrays.val_f16_array_2_;
    output_arrays.val_f16_array_2_ = _e166;
    half _e167 = val;
    half _e169 = val;
    val = _e169 + metal::abs(_e167);
    half _e171 = val;
    half _e172 = val;
    half _e173 = val;
    half _e175 = val;
    val = _e175 + metal::clamp(_e171, _e172, _e173);
    half _e177 = val;
    half _e179 = val;
    half _e182 = val;
    val = _e182 + metal::dot(metal::half2(_e177), metal::half2(_e179));
    half _e184 = val;
    half _e185 = val;
    half _e187 = val;
    val = _e187 + metal::max(_e184, _e185);
    half _e189 = val;
    half _e190 = val;
    half _e192 = val;
    val = _e192 + metal::min(_e189, _e190);
    half _e194 = val;
    half _e196 = val;
    val = _e196 + metal::sign(_e194);
    half _e199 = val;
    val = _e199 + 1.0h;
    metal::half2 _e203 = input_uniform.val_f16_2_;
    metal::float2 float_vec2_ = static_cast<metal::float2>(_e203);
    output.val_f16_2_ = static_cast<metal::half2>(float_vec2_);
    metal::half3 _e210 = input_uniform.val_f16_3_;
    metal::float3 float_vec3_ = static_cast<metal::float3>(_e210);
    output.val_f16_3_ = static_cast<metal::half3>(float_vec3_);
    metal::half4 _e217 = input_uniform.val_f16_4_;
    metal::float4 float_vec4_ = static_cast<metal::float4>(_e217);
    output.val_f16_4_ = static_cast<metal::half4>(float_vec4_);
    metal::half2x2 _e226 = input_uniform.val_mat2x2_;
    output.val_mat2x2_ = metal::half2x2(metal::float2x2(_e226));
    metal::half2x3 _e233 = input_uniform.val_mat2x3_;
    output.val_mat2x3_ = metal::half2x3(metal::float2x3(_e233));
    metal::half2x4 _e240 = input_uniform.val_mat2x4_;
    output.val_mat2x4_ = metal::half2x4(metal::float2x4(_e240));
    metal::half3x2 _e247 = input_uniform.val_mat3x2_;
    output.val_mat3x2_ = metal::half3x2(metal::float3x2(_e247));
    metal::half3x3 _e254 = input_uniform.val_mat3x3_;
    output.val_mat3x3_ = metal::half3x3(metal::float3x3(_e254));
    metal::half3x4 _e261 = input_uniform.val_mat3x4_;
    output.val_mat3x4_ = metal::half3x4(metal::float3x4(_e261));
    metal::half4x2 _e268 = input_uniform.val_mat4x2_;
    output.val_mat4x2_ = metal::half4x2(metal::float4x2(_e268));
    metal::half4x3 _e275 = input_uniform.val_mat4x3_;
    output.val_mat4x3_ = metal::half4x3(metal::float4x3(_e275));
    metal::half4x4 _e282 = input_uniform.val_mat4x4_;
    output.val_mat4x4_ = metal::half4x4(metal::float4x4(_e282));
    half _e285 = val;
    return _e285;
}

kernel void main_(
  constant UniformCompatible& input_uniform [[user(fake0)]]
, device UniformCompatible const& input_storage [[user(fake0)]]
, device StorageCompatible const& input_arrays [[user(fake0)]]
, device UniformCompatible& output [[user(fake0)]]
, device StorageCompatible& output_arrays [[user(fake0)]]
) {
    half _e3 = f16_function(2.0h, input_uniform, input_storage, input_arrays, output, output_arrays);
    output.final_value = _e3;
    return;
}
